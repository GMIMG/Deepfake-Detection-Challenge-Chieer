{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"name":"2_train_model-googlenet.ipynb의 사본","provenance":[{"file_id":"1X4j4rOGRJ-S3XYcn7yOCE-1qNXGx_6ji","timestamp":1584788233868}],"collapsed_sections":[],"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"RYBGP4xZNNJU","colab_type":"code","outputId":"69898719-1cdc-41be-8c74-1e1897ee5fe9","executionInfo":{"status":"ok","timestamp":1584786147831,"user_tz":-540,"elapsed":22956,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":125}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GtUVOirDe4nf","colab_type":"code","outputId":"8d9d914d-9f44-4a25-f2c8-f28b920fa487","executionInfo":{"status":"ok","timestamp":1584786275947,"user_tz":-540,"elapsed":119896,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["!pip install -U tensorflow\n","!pip install -U keras\n","!pip install -U tensorflow-addons~=0.7.0"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting tensorflow\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/85/d4/c0cd1057b331bc38b65478302114194bd8e1b9c2bbc06e300935c0e93d90/tensorflow-2.1.0-cp36-cp36m-manylinux2010_x86_64.whl (421.8MB)\n","\u001b[K     |████████████████████████████████| 421.8MB 37kB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: gast==0.2.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.2.2)\n","Requirement already satisfied, skipping upgrade: scipy==1.4.1; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.4.1)\n","Requirement already satisfied, skipping upgrade: wheel>=0.26; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.34.2)\n","Collecting tensorboard<2.2.0,>=2.1.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d9/41/bbf49b61370e4f4d245d4c6051dfb6db80cec672605c91b1652ac8cc3d38/tensorboard-2.1.1-py3-none-any.whl (3.8MB)\n","\u001b[K     |████████████████████████████████| 3.9MB 37.3MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.9.0)\n","Requirement already satisfied, skipping upgrade: keras-applications>=1.0.8 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.0.8)\n","Requirement already satisfied, skipping upgrade: protobuf>=3.8.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.10.0)\n","Requirement already satisfied, skipping upgrade: six>=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12.0)\n","Requirement already satisfied, skipping upgrade: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12.1)\n","Collecting tensorflow-estimator<2.2.0,>=2.1.0rc0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/18/90/b77c328a1304437ab1310b463e533fa7689f4bfc41549593056d812fab8e/tensorflow_estimator-2.1.0-py2.py3-none-any.whl (448kB)\n","\u001b[K     |████████████████████████████████| 450kB 47.3MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied, skipping upgrade: opt-einsum>=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.2.0)\n","Requirement already satisfied, skipping upgrade: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.8.1)\n","Requirement already satisfied, skipping upgrade: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.18.2)\n","Requirement already satisfied, skipping upgrade: keras-preprocessing>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied, skipping upgrade: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.24.3)\n","Requirement already satisfied, skipping upgrade: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied, skipping upgrade: google-auth<2,>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (1.7.2)\n","Requirement already satisfied, skipping upgrade: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (3.2.1)\n","Requirement already satisfied, skipping upgrade: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (0.4.1)\n","Requirement already satisfied, skipping upgrade: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (1.0.0)\n","Requirement already satisfied, skipping upgrade: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (46.0.0)\n","Requirement already satisfied, skipping upgrade: requests<3,>=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow) (2.21.0)\n","Requirement already satisfied, skipping upgrade: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.8->tensorflow) (2.8.0)\n","Requirement already satisfied, skipping upgrade: cachetools<3.2,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow) (3.1.1)\n","Requirement already satisfied, skipping upgrade: rsa<4.1,>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow) (4.0)\n","Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow) (0.2.8)\n","Requirement already satisfied, skipping upgrade: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.2.0,>=2.1.0->tensorflow) (1.3.0)\n","Requirement already satisfied, skipping upgrade: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow) (1.24.3)\n","Requirement already satisfied, skipping upgrade: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow) (3.0.4)\n","Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow) (2019.11.28)\n","Requirement already satisfied, skipping upgrade: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow) (2.8)\n","Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<4.1,>=3.1.4->google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow) (0.4.8)\n","Requirement already satisfied, skipping upgrade: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.2.0,>=2.1.0->tensorflow) (3.1.0)\n","\u001b[31mERROR: tensorflow-federated 0.12.0 has requirement tensorflow-addons~=0.7.0, but you'll have tensorflow-addons 0.8.3 which is incompatible.\u001b[0m\n","Installing collected packages: tensorboard, tensorflow-estimator, tensorflow\n","  Found existing installation: tensorboard 1.15.0\n","    Uninstalling tensorboard-1.15.0:\n","      Successfully uninstalled tensorboard-1.15.0\n","  Found existing installation: tensorflow-estimator 1.15.1\n","    Uninstalling tensorflow-estimator-1.15.1:\n","      Successfully uninstalled tensorflow-estimator-1.15.1\n","  Found existing installation: tensorflow 1.15.0\n","    Uninstalling tensorflow-1.15.0:\n","      Successfully uninstalled tensorflow-1.15.0\n","Successfully installed tensorboard-2.1.1 tensorflow-2.1.0 tensorflow-estimator-2.1.0\n","Collecting keras\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ad/fd/6bfe87920d7f4fd475acd28500a42482b6b84479832bdc0fe9e589a60ceb/Keras-2.3.1-py2.py3-none-any.whl (377kB)\n","\u001b[K     |████████████████████████████████| 378kB 4.9MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: scipy>=0.14 in /usr/local/lib/python3.6/dist-packages (from keras) (1.4.1)\n","Requirement already satisfied, skipping upgrade: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from keras) (1.12.0)\n","Requirement already satisfied, skipping upgrade: numpy>=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras) (1.18.2)\n","Requirement already satisfied, skipping upgrade: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from keras) (1.1.0)\n","Requirement already satisfied, skipping upgrade: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from keras) (1.0.8)\n","Requirement already satisfied, skipping upgrade: h5py in /usr/local/lib/python3.6/dist-packages (from keras) (2.8.0)\n","Requirement already satisfied, skipping upgrade: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras) (3.13)\n","Installing collected packages: keras\n","  Found existing installation: Keras 2.2.5\n","    Uninstalling Keras-2.2.5:\n","      Successfully uninstalled Keras-2.2.5\n","Successfully installed keras-2.3.1\n","Collecting tensorflow-addons~=0.7.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e5/1a/988536d55ff814069d851731f31665b0a30989c496d64e0ff3a5efa42f63/tensorflow_addons-0.7.1-cp36-cp36m-manylinux2010_x86_64.whl (986kB)\n","\u001b[K     |████████████████████████████████| 993kB 4.6MB/s \n","\u001b[?25hRequirement already satisfied, skipping upgrade: tensorflow>=2.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-addons~=0.7.0) (2.1.0)\n","Requirement already satisfied, skipping upgrade: opt-einsum>=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.2.0)\n","Requirement already satisfied, skipping upgrade: tensorflow-estimator<2.2.0,>=2.1.0rc0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2.1.0)\n","Requirement already satisfied, skipping upgrade: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.9.0)\n","Requirement already satisfied, skipping upgrade: scipy==1.4.1; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.4.1)\n","Requirement already satisfied, skipping upgrade: keras-applications>=1.0.8 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.0.8)\n","Requirement already satisfied, skipping upgrade: wheel>=0.26; python_version >= \"3\" in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.34.2)\n","Requirement already satisfied, skipping upgrade: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.18.2)\n","Requirement already satisfied, skipping upgrade: keras-preprocessing>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.1.0)\n","Requirement already satisfied, skipping upgrade: six>=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.12.0)\n","Requirement already satisfied, skipping upgrade: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.24.3)\n","Requirement already satisfied, skipping upgrade: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.8.1)\n","Requirement already satisfied, skipping upgrade: tensorboard<2.2.0,>=2.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2.1.1)\n","Requirement already satisfied, skipping upgrade: protobuf>=3.8.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.10.0)\n","Requirement already satisfied, skipping upgrade: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.1.0)\n","Requirement already satisfied, skipping upgrade: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.2.0)\n","Requirement already satisfied, skipping upgrade: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.12.1)\n","Requirement already satisfied, skipping upgrade: gast==0.2.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.2.2)\n","Requirement already satisfied, skipping upgrade: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.8->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2.8.0)\n","Requirement already satisfied, skipping upgrade: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.4.1)\n","Requirement already satisfied, skipping upgrade: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.0.0)\n","Requirement already satisfied, skipping upgrade: google-auth<2,>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.7.2)\n","Requirement already satisfied, skipping upgrade: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.2.1)\n","Requirement already satisfied, skipping upgrade: requests<3,>=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2.21.0)\n","Requirement already satisfied, skipping upgrade: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (46.0.0)\n","Requirement already satisfied, skipping upgrade: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.3.0)\n","Requirement already satisfied, skipping upgrade: rsa<4.1,>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (4.0)\n","Requirement already satisfied, skipping upgrade: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.2.8)\n","Requirement already satisfied, skipping upgrade: cachetools<3.2,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.1.1)\n","Requirement already satisfied, skipping upgrade: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.0.4)\n","Requirement already satisfied, skipping upgrade: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2.8)\n","Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (2019.11.28)\n","Requirement already satisfied, skipping upgrade: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (1.24.3)\n","Requirement already satisfied, skipping upgrade: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (3.1.0)\n","Requirement already satisfied, skipping upgrade: pyasn1>=0.1.3 in /usr/local/lib/python3.6/dist-packages (from rsa<4.1,>=3.1.4->google-auth<2,>=1.6.3->tensorboard<2.2.0,>=2.1.0->tensorflow>=2.1.0->tensorflow-addons~=0.7.0) (0.4.8)\n","Installing collected packages: tensorflow-addons\n","  Found existing installation: tensorflow-addons 0.8.3\n","    Uninstalling tensorflow-addons-0.8.3:\n","      Successfully uninstalled tensorflow-addons-0.8.3\n","Successfully installed tensorflow-addons-0.7.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"m1NNYFgNODqr","colab_type":"code","colab":{}},"source":["# only colab code"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dtEhBuRTgxWV","colab_type":"code","colab":{}},"source":["# 압축파일 옮기기\n","!mkdir -p /content/kaggle/working/dataset\n","!cp /content/drive/'My Drive'/kaggle/working/dataset/* /content/kaggle/working/dataset/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gRj0gU8jRGeU","colab_type":"code","colab":{}},"source":["# metadata.json 옮기기\n","!mkdir -p /content/kaggle/input/deepfake-detection-challenge/train_sample_videos\n","!cp -r /content/drive/'My Drive'/kaggle/input/deepfake-detection-challenge/train_sample_videos/metadata.json /content/kaggle/input/deepfake-detection-challenge/train_sample_videos/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S_D7C_DbOk6X","colab_type":"code","colab":{}},"source":["!unzip -q /content/kaggle/working/dataset/REAL3.zip -d /content/kaggle/working/dataset/REAL2\n","!unzip -q /content/kaggle/working/dataset/FAKE3.zip -d /content/kaggle/working/dataset/FAKE2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"a2kIF6MRl15D","colab_type":"code","colab":{}},"source":["import os\n","os.getcwd()\n","os.chdir('/content/kaggle/working')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7ElKSqqRd3zq","colab_type":"code","colab":{}},"source":["import os\n","import cv2\n","import json\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sn\n","import pandas as pd"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9mjqBLNQZvWz","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jXzDAJbmZvW7","colab_type":"code","outputId":"c912252a-08a4-4f1f-c14a-9a41efe4e77a","executionInfo":{"status":"ok","timestamp":1584786364836,"user_tz":-540,"elapsed":205745,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":402}},"source":["train_sample_metadata = pd.read_json('../input/deepfake-detection-challenge/train_sample_videos/metadata.json').T\n","train_sample_metadata"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>split</th>\n","      <th>original</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>aagfhgtpmv.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>vudstovrck.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>aapnvogymq.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>jdubbvfswz.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>abarnvbtwb.mp4</th>\n","      <td>REAL</td>\n","      <td>train</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>abofeumbvv.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>atvmxvwyns.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>abqwwspghj.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>qzimuostzz.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>etejaapnxh.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>wtreibcmgm.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>etmcruaihe.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>afoovlsmtx.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>etohcvnzbj.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>bdnaqemxmr.mp4</td>\n","    </tr>\n","    <tr>\n","      <th>eudeqjhdfd.mp4</th>\n","      <td>REAL</td>\n","      <td>train</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>eukvucdetx.mp4</th>\n","      <td>FAKE</td>\n","      <td>train</td>\n","      <td>gjypopglvi.mp4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows × 3 columns</p>\n","</div>"],"text/plain":["               label  split        original\n","aagfhgtpmv.mp4  FAKE  train  vudstovrck.mp4\n","aapnvogymq.mp4  FAKE  train  jdubbvfswz.mp4\n","abarnvbtwb.mp4  REAL  train            None\n","abofeumbvv.mp4  FAKE  train  atvmxvwyns.mp4\n","abqwwspghj.mp4  FAKE  train  qzimuostzz.mp4\n","...              ...    ...             ...\n","etejaapnxh.mp4  FAKE  train  wtreibcmgm.mp4\n","etmcruaihe.mp4  FAKE  train  afoovlsmtx.mp4\n","etohcvnzbj.mp4  FAKE  train  bdnaqemxmr.mp4\n","eudeqjhdfd.mp4  REAL  train            None\n","eukvucdetx.mp4  FAKE  train  gjypopglvi.mp4\n","\n","[400 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"RMhgz_j3ZvXG","colab_type":"code","outputId":"0659033b-3634-4326-9b07-b399868c2b25","executionInfo":{"status":"ok","timestamp":1584786564704,"user_tz":-540,"elapsed":404512,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":582}},"source":["# 전처리한 이미지 불러오기\n","input_shape = (160, 160, 3)\n","data_dir = '../working/dataset'\n","\n","real_data = [f for f in os.listdir(data_dir+'/REAL2') if f.endswith('.jpg')]\n","fake_data = [f for f in os.listdir(data_dir+'/FAKE2') if f.endswith('.jpg')]\n","\n","X = []\n","Y = []\n","\n","# 이미지 불러서 list로 저장\n","for idx, img in enumerate(fake_data):\n","    X.append(img_to_array(load_img(data_dir+'/FAKE2/'+img)).flatten() / 255.0)\n","    Y.append(0)\n","    original_img = img.split('_')[-1].split('.')[0]\n","    frame = img.split('_')[2]\n","    X.append(img_to_array(load_img(data_dir+f'/REAL2/REAL_{original_img}_{frame}_0.jpg' )).flatten() / 255.0)\n","    Y.append(1)\n","    print('*',end='')\n","\n","    if (idx+1) % 500 == 0:\n","        print(idx+1)\n","\n","Y_val_org = Y\n","\n","#Normalization\n","X = np.array(X)\n","Y = to_categorical(Y, 2)\n","\n","#Reshape\n","X = X.reshape(-1, 160, 160, 3)\n","\n","#Train-Test split\n","X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size = 0.1)\n","\n","#X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.2)\n","print(len(X_train)*8//10)\n","\n","split_eight = len(X_train)*8//10"],"execution_count":0,"outputs":[{"output_type":"stream","textnnnnnnnnnnn","********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************6000\nnnnnn","********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************9000\nnnnnnnnnnnnn","********************************************************************************************************************************************************************************************************************************************************************************************************22025\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TSu3I1PS6vZO","colab_type":"code","outputId":"83457bd7-66d4-4e46-fc92-37c3ee2f1407","executionInfo":{"status":"ok","timestamp":1584786596880,"user_tz":-540,"elapsed":436147,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":318}},"source":["from tensorflow.keras.applications import InceptionResNetV2\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.layers import Flatten\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import InputLayer\n","from tensorflow.keras.layers import GlobalAveragePooling2D\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.models import Model\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n","\n","\n","googleNet_model = InceptionResNetV2(include_top=False, input_shape=input_shape) #  weights='imagenet',\n","googleNet_model.trainable = True\n","model = Sequential()\n","model.add(googleNet_model)\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(units=2, activation='softmax'))\n","model.compile(loss='binary_crossentropy',\n","              optimizer=optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),\n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Downloading data from https://github.com/fchollet/deep-learning-models/releases/download/v0.7/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5\n","219062272/219055592 [==============================] - 5s 0us/step\n","Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","inception_resnet_v2 (Model)  (None, 3, 3, 1536)        54336736  \n","_________________________________________________________________\n","global_average_pooling2d (Gl (None, 1536)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 2)                 3074      \n","=================================================================\n","Total params: 54,339,810\n","Trainable params: 54,279,266\n","Non-trainable params: 60,544\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xnduKoBVZvXN","colab_type":"code","colab":{}},"source":["# #efficientnet\n","# import efficientnet.keras as efn\n","\n","# model = efn.EfficientNetB0(weights='imagenet')  # or weights='noisy-student'\n","# model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WQRMSTLwZvXV","colab_type":"code","colab":{}},"source":["# #Xception\n","# model = Xception(#include_top=False,\n","#                  weights=None,\n","#                  input_shape=(height, width, 3),classes = 2)\n","\n","# #model = multi_gpu_model(model, gpus=2)\n","\n","# model.compile(loss='binary_crossentropy',\n","#               optimizer='rmsprop',\n","#               metrics=['accuracy'])\n","\n","# model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BxTj1UsIpKIH","colab_type":"code","outputId":"209e83d3-fe06-476b-ca59-4806d89e1b2b","executionInfo":{"status":"ok","timestamp":1584786615595,"user_tz":-540,"elapsed":628,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["split_eight"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22025"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"TzJnt3grx8Nb","colab_type":"code","outputId":"a8aedbd6-20f2-4623-cc88-de06b42e08b7","executionInfo":{"status":"ok","timestamp":1584787489824,"user_tz":-540,"elapsed":870095,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":316}},"source":["early_stopping = EarlyStopping(monitor='val_loss',\n","                               min_delta=0,\n","                               patience=2,\n","                               verbose=0, mode='auto')\n","#mc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', save_best_only=True)\n","\n","# model.compile(loss='binary_crossentropy',\n","#               optimizer='rmsprop',\n","#               metrics=['accuracy'])\n","\n","# adam = keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n","# adam = optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer=optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999),\n","              metrics=['accuracy'])\n","\n","EPOCHS = 100\n","BATCH_SIZE = 128\n","history = model.fit(X_train[:split_eight], Y_train[:split_eight], batch_size = BATCH_SIZE, epochs = EPOCHS, validation_data = (X_train[split_eight:], Y_train[split_eight:]), verbose = 1,  callbacks=[early_stopping]) #, mc"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 22025 samples, validate on 5507 samples\n","Epoch 1/100\n","22025/22025 [==============================] - 143s 6ms/sample - loss: 0.3381 - accuracy: 0.8593 - val_loss: 0.4044 - val_accuracy: 0.8560\n","Epoch 2/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0883 - accuracy: 0.9666 - val_loss: 0.2298 - val_accuracy: 0.9472\n","Epoch 3/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0350 - accuracy: 0.9889 - val_loss: 0.0765 - val_accuracy: 0.9775\n","Epoch 4/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0145 - accuracy: 0.9966 - val_loss: 0.0529 - val_accuracy: 0.9824\n","Epoch 5/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0072 - accuracy: 0.9982 - val_loss: 0.0513 - val_accuracy: 0.9826\n","Epoch 6/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0033 - accuracy: 0.9995 - val_loss: 0.0465 - val_accuracy: 0.9857\n","Epoch 7/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0026 - accuracy: 0.9994 - val_loss: 0.0498 - val_accuracy: 0.9844\n","Epoch 8/100\n","22025/22025 [==============================] - 104s 5ms/sample - loss: 0.0046 - accuracy: 0.9988 - val_loss: 0.0805 - val_accuracy: 0.9809\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Gjm8D2Fl_Ts-","colab_type":"code","outputId":"df3e3bc7-0d73-4bdb-e9e5-a79350cb0668","executionInfo":{"status":"ok","timestamp":1584787513844,"user_tz":-540,"elapsed":9235,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["model.evaluate(X_validation, Y_validation)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["3060/3060 [==============================] - 9s 3ms/sample - loss: 0.0522 - accuracy: 0.9873\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.052205514126484664, 0.9872549]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"FsIxC16T_Tpz","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FaDMvGrv_Th9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v-WVSTCO_TdI","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D8yZso9f_Tae","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OaSp1UNw_TSL","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"h2IIT7cGurLD"},"source":["# 3DCNN"]},{"cell_type":"code","metadata":{"scrolled":true,"colab_type":"code","outputId":"c7bb1d93-de4c-46c1-93b8-80dc516251c7","executionInfo":{"status":"error","timestamp":1584767178231,"user_tz":-540,"elapsed":7879,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"id":"PKdEzyejuq9d","colab":{"base_uri":"https://localhost:8080/","height":369}},"source":["# 저장된 이미지 수\n","import pandas as pd\n","data_dir = '../working/dataset'\n","train_sample_metadata = pd.read_json('../input/deepfake-detection-challenge/train_sample_videos/metadata.json').T\n","train_sample_metadata['count'] = 0\n","for i in os.listdir(data_dir+'/REAL2'):\n","    train_sample_metadata.loc[i.split('_')[1]+'.mp4','count'] += 1\n","for i in os.listdir(data_dir+'/FAKE2'):\n","    train_sample_metadata.loc[i.split('_')[1]+'.mp4','count'] += 1\n","train_sample_metadata[(train_sample_metadata['count']!=0) & (train_sample_metadata['count']!=300)]"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-912b95109f2c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mtrain_sample_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'_'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.mp4'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_dir\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'/FAKE2'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mtrain_sample_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'_'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'.mp4'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mtrain_sample_metadata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_sample_metadata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain_sample_metadata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m    203\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_setitem_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 205\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setitem_with_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_setitem_with_indexer\u001b[0;34m(self, indexer, value)\u001b[0m\n\u001b[1;32m    555\u001b[0m                 \u001b[0;31m# scalar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    556\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 557\u001b[0;31m                     \u001b[0msetter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    558\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36msetter\u001b[0;34m(item, v)\u001b[0m\n\u001b[1;32m    487\u001b[0m                     \u001b[0;31m# set the item, possibly having a dtype change\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    488\u001b[0m                     \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m                     \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m                     \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m                     \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_update_cacher\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclear\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mcopy\u001b[0;34m(self, deep)\u001b[0m\n\u001b[1;32m   5994\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5995\u001b[0m         \"\"\"\n\u001b[0;32m-> 5996\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5997\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5998\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mcopy\u001b[0;34m(self, deep)\u001b[0m\n\u001b[1;32m    783\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    784\u001b[0m                 \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 785\u001b[0;31m             \u001b[0mnew_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    786\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    787\u001b[0m             \u001b[0mnew_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    783\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    784\u001b[0m                 \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 785\u001b[0;31m             \u001b[0mnew_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    786\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    787\u001b[0m             \u001b[0mnew_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(ax)\u001b[0m\n\u001b[1;32m    782\u001b[0m                 \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    783\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 784\u001b[0;31m                 \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    785\u001b[0m             \u001b[0mnew_axes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    786\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mview\u001b[0;34m(self, cls)\u001b[0m\n\u001b[1;32m    791\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_shallow_copy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    792\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 793\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_id\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    794\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"eb44f13e-c864-4a46-8ac0-bb91256daba6","executionInfo":{"status":"ok","timestamp":1584601989893,"user_tz":-540,"elapsed":10563,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"id":"hRyE49YCuqy2","colab":{"base_uri":"https://localhost:8080/","height":263}},"source":["train_sample_metadata[(train_sample_metadata['label']=='FAKE') & (train_sample_metadata['count']==300)].index"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['acqfdwsrhi.mp4', 'adylbeequz.mp4', 'agqphdxmwt.mp4', 'ahbweevwpv.mp4',\n","       'ajwpjhrbcv.mp4', 'aorjvbyxhw.mp4', 'apatcsqejh.mp4', 'asmpfjfzif.mp4',\n","       'avnqydkqjj.mp4', 'awnwkrqibf.mp4', 'azsmewqghg.mp4', 'bbhtdfuqxq.mp4',\n","       'blzydqdfem.mp4', 'bnjcdrfuov.mp4', 'bofqajtwve.mp4', 'bourlmzsio.mp4',\n","       'bpxckdzddv.mp4', 'bqqpbzjgup.mp4', 'bsqgziaylx.mp4', 'btjlfpzbdu.mp4',\n","       'btmsngnqhv.mp4', 'btohlidmru.mp4', 'bvzjkezkms.mp4', 'cknyxaqouy.mp4',\n","       'cksanfsjhc.mp4', 'coadfnerlk.mp4', 'curpwogllm.mp4', 'cxrfacemmq.mp4',\n","       'czfunozvwp.mp4', 'dbzpcjntve.mp4', 'dfbpceeaox.mp4', 'dgxrqjdomn.mp4',\n","       'dhkwmjxwrn.mp4', 'dnyvfblxpm.mp4', 'drtbksnpol.mp4', 'dsdoseflas.mp4',\n","       'dtocdfbwca.mp4', 'dzvyfiarrq.mp4', 'ebchwmwayp.mp4', 'eepezmygaq.mp4',\n","       'ehdkmxgtxh.mp4', 'ehfiekigla.mp4', 'ekhacizpah.mp4', 'emaalmsonj.mp4',\n","       'emfbhytfhc.mp4', 'eqjscdagiv.mp4', 'eqvuznuwsa.mp4', 'etmcruaihe.mp4',\n","       'etohcvnzbj.mp4'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"da3d805d-94ec-4e9f-ef2f-29091ad53d1b","executionInfo":{"status":"ok","timestamp":1584603964000,"user_tz":-540,"elapsed":12749,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"id":"es99QRRFuqm9","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy as np\n","import cv2\n","X = []\n","Y = []\n","FAKE_vid = train_sample_metadata[(train_sample_metadata['label']=='FAKE') & (train_sample_metadata['count']==300)].index\n","for idx, file_name_mp4 in enumerate(FAKE_vid):\n","    frames = []\n","    file_name = file_name_mp4.split('.')[0]\n","    original_video= train_sample_metadata.loc[file_name_mp4]['original'].split('.')[0]\n","    for i in range(300):\n","        im = cv2.imread(data_dir + f'/FAKE2/FAKE_{file_name}_{i}_0_{original_video}.jpg')\n","        im = cv2.resize(im, (70, 70))\n","        frames.append(im)\n","    X.append(np.array(frames))\n","    Y.append(0)\n","    frames = []\n","    for i in range(300):\n","        im = cv2.imread(data_dir + f'/REAL2/REAL_{original_video}_{i}_0.jpg')\n","        im = cv2.resize(im, (70, 70))\n","        frames.append(im)\n","    X.append(np.array(frames))\n","    Y.append(1)\n","    print('*',end='')\n","    if (idx+1) % 50 == 0:\n","        print(idx+1,'/',len(FAKE_vid))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["*************************************************"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"a540f1a4-cef6-4a34-a7e9-4c84b96e2dad","executionInfo":{"status":"ok","timestamp":1584603988928,"user_tz":-540,"elapsed":697,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"id":"23CIWlxKuqVg","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["ls = []\n","for i in X:\n","    ls.append(i.shape)\n","ls"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3),\n"," (300, 70, 70, 3)]"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"NuzWFuXpuqH9","colab":{}},"source":["#Y_val_org = Y\n","\n","#Normalization\n","X = np.array(X)\n","Y = to_categorical(Y, 2)\n","\n","#Reshape\n","#X = X.reshape(-1, 128, 128, 3)\n","\n","#Train-Test split\n","X_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","outputId":"047e5a21-4b77-4542-b444-cf35bfe58991","executionInfo":{"status":"ok","timestamp":1584603965302,"user_tz":-540,"elapsed":434,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"id":"-mHX5rCBup5q","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(98, 300, 70, 70, 3)"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"scrolled":true,"colab_type":"code","id":"_b_GeBFguo0O","colab":{}},"source":["# import numpy as np\n","# import cv2\n","# X = []\n","# Y = []\n","# for file_name_mp4 in train_sample_metadata[train_sample_metadata['label']=='REAL' and train_sample_metadata['count']==300].index:\n","#     frames = np.array([])\n","#     file_name = file_name_mp4.split('.')[0]\n","#     for i in range(300):\n","#         im = cv2.imread(data_dir + f'/REAL3/REAL_{file_name}_{i}_0.jpg')\n","#         np.append(frames, im)\n","#         X.append(frames)\n","#         Y.append(1)\n","# for file_name_mp4 in train_sample_metadata[train_sample_metadata['label']=='FAKE' and train_sample_metadata['count']==300].index:\n","#     frames = np.array([])\n","#     file_name = file_name_mp4.split('.')[0]\n","#     original_video= train_sample_metadata.loc[file_name_mp4]['original'].split('.')[0]\n","#     for i in range(300):\n","#         im = cv2.imread(data_dir + f'/FAKE3/FAKE_{file_name}_{i}_0_{original_video}.jpg')\n","#         np.append(frames, im)\n","#         X.append(frames)\n","#         Y.append(0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KvYcJmHhZvYF","colab_type":"code","outputId":"fd1e89a2-c8e2-4978-fc2a-91a36c9e51c4","colab":{}},"source":[""],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"b97j55WAZvYI","colab_type":"code","colab":{}},"source":["from keras import Input, layers, optimizers\n","from keras.models import Model\n","from keras.models import Sequential\n","from keras.layers.convolutional import Conv2D, Conv3D, MaxPooling3D, ZeroPadding3D\n","from keras.layers.core import Dense, Dropout, Flatten, Lambda\n","from keras.callbacks import EarlyStopping\n","from keras.callbacks import ModelCheckpoint"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bQEswURGZvYL","colab_type":"code","outputId":"d80d703e-92a7-4561-815a-388d87b2c2ba","executionInfo":{"status":"ok","timestamp":1584604000372,"user_tz":-540,"elapsed":536,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":721}},"source":["model = Sequential()\n","\n","\n","\n","# 1st layer group\n","model.add(Conv3D(64, (3, 3, 3), activation=\"relu\",name=\"conv1\", \n","                 input_shape=(300,70,70,3),\n","                 strides=(1, 1, 1), padding=\"same\"))  \n","model.add(MaxPooling3D(pool_size=(1, 2, 2), strides=(1, 2, 2), name=\"pool1\", padding=\"valid\"))\n","\n","# 2nd layer group  \n","model.add(Conv3D(128, (3, 3, 3), activation=\"relu\",name=\"conv2\", \n","                 strides=(1, 1, 1), padding=\"same\"))\n","model.add(MaxPooling3D(pool_size=(2, 2, 2), strides=(2, 2, 2), name=\"pool2\", padding=\"valid\"))\n","\n","# 3rd layer group   \n","model.add(Conv3D(256, (3, 3, 3), activation=\"relu\",name=\"conv3a\", \n","                 strides=(1, 1, 1), padding=\"same\"))\n","model.add(Conv3D(256, (3, 3, 3), activation=\"relu\",name=\"conv3b\", \n","                 strides=(1, 1, 1), padding=\"same\"))\n","model.add(MaxPooling3D(pool_size=(2, 2, 2), strides=(2, 2, 2), name=\"pool3\", padding=\"valid\"))\n","\n","# 4th layer group  \n","model.add(Conv3D(512, (3, 3, 3), activation=\"relu\",name=\"conv4a\", \n","                 strides=(1, 1, 1), padding=\"same\"))   \n","model.add(Conv3D(512, (3, 3, 3), activation=\"relu\",name=\"conv4b\", \n","                 strides=(1, 1, 1), padding=\"same\"))\n","model.add(MaxPooling3D(pool_size=(2, 2, 2), strides=(2, 2, 2), name=\"pool4\", padding=\"valid\"))\n","\n","# 5th layer group  \n","model.add(Conv3D(512, (3, 3, 3), activation=\"relu\",name=\"conv5a\", \n","                 strides=(1, 1, 1), padding=\"same\"))   \n","model.add(Conv3D(512, (3, 3, 3), activation=\"relu\",name=\"conv5b\",\n","                  strides=(1, 1, 1), padding=\"same\"))\n","model.add(ZeroPadding3D(padding=(0, 1, 1)))\t\n","model.add(MaxPooling3D(pool_size=(2, 2, 2), strides=(2, 2, 2), name=\"pool5\", padding=\"valid\"))\n","model.add(Flatten())\n","\n","# FC layers group\n","# model.add(Dense(512, activation='relu', name='fc6'))\n","# model.add(Dropout(.5))\n","# model.add(Dense(512, activation='relu', name='fc7'))\n","# model.add(Dropout(.5))\n","model.add(Dense(2, activation='softmax', name='fc8'))\n","\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential_10\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv1 (Conv3D)               (None, 300, 70, 70, 64)   5248      \n","_________________________________________________________________\n","pool1 (MaxPooling3D)         (None, 300, 35, 35, 64)   0         \n","_________________________________________________________________\n","conv2 (Conv3D)               (None, 300, 35, 35, 128)  221312    \n","_________________________________________________________________\n","pool2 (MaxPooling3D)         (None, 150, 17, 17, 128)  0         \n","_________________________________________________________________\n","conv3a (Conv3D)              (None, 150, 17, 17, 256)  884992    \n","_________________________________________________________________\n","conv3b (Conv3D)              (None, 150, 17, 17, 256)  1769728   \n","_________________________________________________________________\n","pool3 (MaxPooling3D)         (None, 75, 8, 8, 256)     0         \n","_________________________________________________________________\n","conv4a (Conv3D)              (None, 75, 8, 8, 512)     3539456   \n","_________________________________________________________________\n","conv4b (Conv3D)              (None, 75, 8, 8, 512)     7078400   \n","_________________________________________________________________\n","pool4 (MaxPooling3D)         (None, 37, 4, 4, 512)     0         \n","_________________________________________________________________\n","conv5a (Conv3D)              (None, 37, 4, 4, 512)     7078400   \n","_________________________________________________________________\n","conv5b (Conv3D)              (None, 37, 4, 4, 512)     7078400   \n","_________________________________________________________________\n","zero_padding3d_10 (ZeroPaddi (None, 37, 6, 6, 512)     0         \n","_________________________________________________________________\n","pool5 (MaxPooling3D)         (None, 18, 3, 3, 512)     0         \n","_________________________________________________________________\n","flatten_10 (Flatten)         (None, 82944)             0         \n","_________________________________________________________________\n","fc8 (Dense)                  (None, 2)                 165890    \n","=================================================================\n","Total params: 27,821,826\n","Trainable params: 27,821,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4bWb0gSy72i_","colab_type":"code","outputId":"bdd480bf-f518-4a84-cadc-a3c3ec614a6c","executionInfo":{"status":"ok","timestamp":1584604307772,"user_tz":-540,"elapsed":285307,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":386}},"source":["# early_stopping = EarlyStopping(monitor='val_loss',\n","#                                min_delta=0,\n","#                                patience=2,\n","#                                verbose=0, mode='auto')\n","# mc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', save_best_only=True)\n","\n","# model.compile(loss='binary_crossentropy',\n","#               optimizer='rmsprop',\n","#               metrics=['accuracy'])\n","\n","#adam = keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n","# adam = optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n","\n","model.compile(loss='binary_crossentropy',\n","              optimizer=optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999),\n","              metrics=['accuracy'])\n","\n","EPOCHS = 10\n","BATCH_SIZE = 6\n","history = model.fit(X_train, Y_train, batch_size = BATCH_SIZE, epochs = EPOCHS, validation_data = (X_val, Y_val), verbose = 1) #, callbacks=[early_stopping, mc]"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 78 samples, validate on 20 samples\n","Epoch 1/10\n","78/78 [==============================] - 35s 445ms/step - loss: 1.0638 - accuracy: 0.5385 - val_loss: 1.9422 - val_accuracy: 0.3500\n","Epoch 2/10\n","78/78 [==============================] - 28s 355ms/step - loss: 0.9154 - accuracy: 0.5128 - val_loss: 0.8170 - val_accuracy: 0.4000\n","Epoch 3/10\n","78/78 [==============================] - 28s 354ms/step - loss: 1.1526 - accuracy: 0.5513 - val_loss: 1.2785 - val_accuracy: 0.3500\n","Epoch 4/10\n","78/78 [==============================] - 28s 354ms/step - loss: 0.8118 - accuracy: 0.5385 - val_loss: 1.4857 - val_accuracy: 0.3500\n","Epoch 5/10\n","78/78 [==============================] - 28s 355ms/step - loss: 0.7593 - accuracy: 0.5385 - val_loss: 0.7598 - val_accuracy: 0.4000\n","Epoch 6/10\n","78/78 [==============================] - 28s 354ms/step - loss: 0.6237 - accuracy: 0.6282 - val_loss: 0.9159 - val_accuracy: 0.2500\n","Epoch 7/10\n","78/78 [==============================] - 28s 354ms/step - loss: 0.6290 - accuracy: 0.5641 - val_loss: 0.9106 - val_accuracy: 0.3000\n","Epoch 8/10\n","78/78 [==============================] - 28s 354ms/step - loss: 0.5715 - accuracy: 0.6667 - val_loss: 0.8693 - val_accuracy: 0.4000\n","Epoch 9/10\n","78/78 [==============================] - 28s 355ms/step - loss: 0.5319 - accuracy: 0.8205 - val_loss: 0.9828 - val_accuracy: 0.3000\n","Epoch 10/10\n","78/78 [==============================] - 28s 354ms/step - loss: 0.4913 - accuracy: 0.8077 - val_loss: 0.9851 - val_accuracy: 0.2500\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PgPZn4oLZvYP","colab_type":"code","colab":{}},"source":["# model = Sequential()\n","# model.add(Conv3D(64, (3, 3, 3), activation=\"relu\",name=\"conv1\", \n","#                  input_shape=(16,112,112,3),\n","#                  strides=(1, 1, 1), padding=\"same\"))  \n","# model.add(MaxPooling3D(pool_size=(1, 2, 2), strides=(1, 2, 2), name=\"pool1\", padding=\"valid\"))\n","# model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RYWbs3EYZvYU","colab_type":"code","colab":{}},"source":["# input_tensor = Input(shape=(30,32,32,3))\n","# layers.Conv2D(32, (1, 1))\n","\n","# layers.Conv3D(32, (3, 3),\n","#                       use_bias=False,\n","#                       name='block1_conv1')(input_tensor)\n","# dense = layers.Dense(32, activation='relu')\n","# output_tensor = dense(input_tensor)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BSfL6O8aZvYX","colab_type":"code","colab":{}},"source":["# model = Model(input_tensor, output_tensor)\n","# model.compile(#optimizer=optimizers.Adam(lr=1e-5, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),\n","#               loss='binary_crossentropy',\n","#               optimizer='rmsprop',\n","#               metrics=['accuracy'])\n","# model.summary()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HleA8JFzZvYa","colab_type":"code","colab":{}},"source":["# class XCEPTION:\n","#     @staticmethod\n","#     def separable_module(x, filters, reg=0.0005):\n","#         residual = Conv2D(filters, (1, 1), strides=(2, 2), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#         residual = BatchNormalization()(residual)\n","        \n","#         x = SeparableConv2D(filters, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#         x = Activation('relu')(x)\n","#         x = BatchNormalization(axis=-1)(x)\n","#         x = SeparableConv2D(filters, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#         x = BatchNormalization(axis=-1)(x)\n","#         x = MaxPooling2D((3, 3), strides=(2, 2), padding='same')(x)\n","#         x = add([x, residual])\n","#         return x\n","        \n","#     @staticmethod\n","#     def build(include_top=True, reg=0.0005):\n","#         input_tensor = Input(shape=x_train_rgbmean.shape[1:])\n","        \n","#         x = Conv2D(32, (3, 3), use_bias=False, padding=\"same\", kernel_regularizer=l2(reg))(input_tensor)\n","#         x = BatchNormalization(axis=-1)(x)\n","        \n","#         x = XCEPTION.separable_module(x, 32, reg=reg)\n","#         x = XCEPTION.separable_module(x, 64, reg=reg)\n","#         x = XCEPTION.separable_module(x, 128, reg=reg)\n","        \n","#         for i in range(8): \n","#             residual = x\n","            \n","#             x = Activation('relu')(x)\n","#             x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#             x = BatchNormalization(axis=-1)(x)\n","#             x = Activation('relu')(x)\n","#             x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#             x = BatchNormalization(axis=-1)(x)\n","#             x = Activation('relu')(x)\n","#             x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#             x = BatchNormalization(axis=-1)(x)\n","#             x = add([x, residual])\n","        \n","#         x = SeparableConv2D(128, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#         x = Activation('relu')(x)\n","#         x = BatchNormalization(axis=-1)(x)\n","#         x = SeparableConv2D(256, (3, 3), padding='same', use_bias=False, kernel_regularizer=l2(reg))(x)\n","#         x = Activation('relu')(x)\n","#         x = BatchNormalization(axis=-1)(x)\n","            \n","#         if include_top:\n","#             x = GlobalAveragePooling2D()(x)\n","#             x = Dropout(0.5)(x)\n","#             x = Dense(num_classes, kernel_regularizer=l2(reg), kernel_constraint=maxnorm(3))(x)\n","#             x = Activation(\"softmax\")(x)\n","        \n","#         model = Model(input_tensor, x)\n","#         return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R-aJ0Xh1ZvYd","colab_type":"code","colab":{}},"source":["# model = XCEPTION.build(include_top=True, reg=0.001)\n","# model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"36K2GwE5ZvYm","colab_type":"code","outputId":"c28c7025-8d22-4992-ff77-2f656fcdee86","executionInfo":{"status":"ok","timestamp":1584611657146,"user_tz":-540,"elapsed":1221,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":677}},"source":["# loss, 정확도 시각화\n","f, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10))\n","t = f.suptitle('Pre-trained InceptionResNetV2 Transfer Learn with Fine-Tuning & Image Augmentation Performance ', fontsize=12)\n","f.subplots_adjust(top=0.85, wspace=0.3)\n","\n","EPOCHS = 7\n","\n","epoch_list = list(range(1,EPOCHS+1))\n","ax1.plot(epoch_list, history.history['accuracy'], label='Train Accuracy')\n","ax1.plot(epoch_list, history.history['val_accuracy'], label='Validation Accuracy')\n","ax1.set_xticks(np.arange(0, EPOCHS+1, 1))\n","ax1.set_ylabel('Accuracy Value')\n","ax1.set_xlabel('Epoch #')\n","ax1.set_title('Accuracy')\n","l1 = ax1.legend(loc=\"best\")\n","\n","ax2.plot(epoch_list, history.history['loss'], label='Train Loss')\n","ax2.plot(epoch_list, history.history['val_loss'], label='Validation Loss')\n","ax2.set_xticks(np.arange(0, EPOCHS+1, 1))\n","ax2.set_ylabel('Loss Value')\n","ax2.set_xlabel('Epoch #')\n","ax2.set_title('Loss')\n","l2 = ax2.legend(loc=\"best\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA34AAAKUCAYAAABbgepEAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjAsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8GearUAAAgAElEQVR4nOzdeXwV1f3/8dcnNyEJW0LCIpBAqAiC\nSkSjaN2wWLeqiEvVugDWtYvS1m+/1lprXVrbB+239teW1ooiaqGlLYjWpW6orSsqbuBCEUjYRCAQ\nCFnv+f1xJsnk5maDhAs37+fjkUfmzpw5c2bu3LnzuWcZc84hIiIiIiIiySsl0QUQERERERGRzqXA\nT0REREREJMkp8BMREREREUlyCvxERERERESSnAI/ERERERGRJKfAT0REREREJMkp8BMJmNlxZvZR\nJ+U9y8zu6Iy8O4uZbTezLyS6HLLrzOwOM/vczNYnuiyJZmY3mdm9LSyfYmb/7oDt7BOfGzP7g5n9\nKNHlkH3XvnCum9kAM3vRzMrM7JeJLo9Ioinwkz3GzFaa2c7gy2JDEAz17KC8bzWzh3YnD+fcS865\nkR1RnvboqBvO3SzDIjO7IjzPOdfTObeig/KuCN73z83sH2Y2cDfzHG9mzsx+HzP/32Y2pY15ODMb\nHkwPNrMaM9s/Trr5ZjbdzPqb2RwzW2tmW83sP2Y2rpm8/xDs73YzqzKz6tDrJ3Zhl9vNzIYA3wNG\nO+f266A8V5rZSR2R157mnPupc+4KADMrCN7/1F3NL+Z6Vvc3qKM+N6Ht3BTKv8LMakOvP9jVfJ1z\n1zjnbu+ocoaZWbqZzTazLWb2mZnd3YZ19plzy8yGmVnUzGYkuiy7Knz9a2P6TvuOiLOtjrxXuAr4\nHOjtnPteBxZTZJ+kwE/2tDOdcz2Bw4Ai4ObYBLtzM9Yc83S+J863gvd9ONATmN4Bee4ALjWzgt3N\nyDm3BngWuDQ838xygNOBB/DlfgM4HMgJ5v0z3g1JcFPdM9jnnwJ/qXvtnDstlH+Hn+shQ4BNzrnP\n2rtiIj8vZhZJxHZ30Zmh97Wnc25tR28gCFjrzqVrgFdC2zuoo7fXQabgr/FfAIYBCxJamo53GbAF\nuMDM0hNdmCTV6r1CS0LXsKHAUueca28BOvn6LJIQuhGWhAhutJ8ADob6Xx+/aWafAJ8E884wsyVm\nVmpmL5vZmHh5mdmpwE34L+HtZvZOMH+Rmd1pZv8ByoEvmNlUM1sWNPtYYWZXh/IZb2YlodcrzewG\nM3s3qOH5i5llhJY3Wz4zG2tmbwXb+QtQv15r2rDdicF2t5nZf4P9x8yyzGymma0zszXmm/lFgmVT\nzNdQ/TbI80MzmxAsuxM4DvhtcPx+G3pPhofynm1mG81slZndXBcYBHn/23yt2BYz+9TMTiMO51wp\n/ibw0ND+HGhmT5vZZjP7yMy+Glp2upktDY7jGjO7IZRdKTAL+HELx/Ly4P3eYmZPmdnQYP6LQZJ3\ngn2+AB/IXRqTxYX4m4b3nHMrnHO/cs6tc87VOufuAboB7aolDt7f/zWzd4EdZpZqZjcG72VZsL+T\nQulbPL7B8hXBup+a2cXma06eBgYF+zcrSHtUcK6Wmtk7ZjY+lE+Tz0s79ikltA+bzOyv5oPmuuXz\nzGx9cO69aGYHhZbNMrMZZva4me0ATmztMxCz7VVmdngwfXFw3h4UvP66mS0IpsOtAure/9Lg+Bwd\nyq/V87iVYxH+3Mwys9+Z2T+D9+c1C9Uqt3Tut3dboe3dEUyPN7MSM/ue+Vq3dWY2dRfT5prZo+av\nOW+Yv7a01EqhGtjqnNvinNvhnHu+nftVd736v+BcXWFmXwzmFwdlnBxK/xUzezsoX7GZ3RqT32XB\nebLJzH5kodrF1s7dOGUzfOB3c7CfZ4aWNalJtlBNmZlFzOyX5ls+fGpm3wqnD9LeEXxGtwfHPNfM\nHg4d+4JQ3i1dO5s99yzO9c/M+pjZY+av8VuC6bwg/R77jogV516hPdew2cBk4PtBuU8yXxv9a/Mt\nN9YG0+nB+nWfg/813zz+fvPXjXlm9lBwHN8zsxFm9oPgPCw2s5NDZZhqrdxjWPOfs8zg/Fhl/rr3\nbzPLbG2/RdrFOac//e2RP2AlcFIwnQ98ANwevHb4G9UcIBMYC3wGjAMi+Iv3SiC9mbxvBR6KmbcI\nWA0cBKQCacBXgP0BA07AfzkcFqQfD5TElPd1YFBQrmXANcGyZsuHDwZWAd8Jtnke/gbhjmbKPgX4\ndxu3eySwFfgy/oebwcCBwbL5wB+BHkD/II+rQ9uoCZXpgiCfnNCxuiKmXA4YHkzPBh4BegEFwMfA\n10N5VwNXBsfiWmAtYLF5A7nAM8AjweseQDEwNXiPxuKb5YwOlq8Djgum+8S+V8B+wDZgZDD/38CU\nYHoisBwYFeR9M/ByvP0LXmcGx+TY0LxXgGnNvG+HAhVAVivn/a2Ezs3g/V2C/wxkBvPOD97vlOC9\n2QEMbO34BscvvP8DgYOaOZ8HA5vwNZgp+HNoE9Cvuc9LS5/hmPnXA68CefjPwB+BOaHll+PPnXTg\n18CS0LJZwXE/JihXBi18BuJsezbwvWD6HuC/wLWhZd+JfR/w57ADUmM+h82ex+04FuHPzazgGB8Z\nHNOHgbltOffbeK2IPYdnEVxngve/BrgN/5k/HX+967MLaecGf92B0UG5/91COQuBWuC2tnw3xB5P\nGq5XU4P34g78ufm74Bw6GSgDeobKf0hw/owBNgBnB8tGA9uBY/HX5unB+1y3rRbP3TjlPA6oxF+P\n/h/waGhZvPNqEQ3Xv2uApcG2+uCvhfXpg7TL8d9RWUHaj4GTgnNkNnB/G6+ds2jm3Gvm3MkFzg3e\n417APGBBvP1o5lzf5e+IVs6F+nsFduEaRug8D9LcFrzf/YF+wMs03IeMx593Pw/OhUz8daMCOCX0\nHnwK/DDI/0rg01D+rd1jtPQ5+12wD4OD4/TFoBwt7rf+9Neev4QXQH9d5y+4mG/H19SsAn5Pw42v\nA74USjuj7mIcmvcRcEIzed9K/MCvxRsPfO3T9cH0eJoGfpeEXv8C+ENr5QOOJ+ZLLfhyaU/g19x2\n/wj8X5w8BuBvRjJD8y4Cng9tI7ZMrwOXho5V3C/14AuoitANKXA1sCiU9/LQsu7BuvuF8i7H39w7\nfNAzJFh2AfBSzHb/CPw4mF4dbKt3TJr69yo4Pn8JpsOB3xMENx7B65SgHEPD+xeT773APcH0AcF+\n949zvHsD7wE/aMN5fytNA7/LW1lnCTCxteOLv/krxd+wZcbkUX+Mgtf/CzwYk+YpYHI7Pi8riR/s\nLAMmhF4PxN/opcZJmx2UPyt4PQuYHWc7cT8DcfL7OrAwVI4raAiuVtFw01X/PtB84NfsedzMsai7\nnpUS3CTTNPC7N7TO6cCHbTn3m9nmFNoX+O2M2cfPgKPakxb/+a8m+HEhWHYHzQR++EB9NXAq8Bpw\na2hZCXBIa+dWsJ+fhJYdEuzrgNC8TcChzeT1a4LrJHALjX+E6I7/XNdtq83nbrD83tB7fXSQtn8L\n59UiGgK/5wh+jAten0TTwO+HoeW/BJ4IvT6T4EeT1s4fWjj34p07cfbzUGBLvP2IzYPd/I5o5bNV\nf6/ALlzDaBr4/Rc4PfT6FGBl6HNQBWSElt8KPB3zHmwHIsHrXsG+ZDezL7H3GM19zlKCZYVx8mhx\nv/Wnv/b8qamn7GlnO+eynXNDnXPfcM7tDC0rDk0PBb4XNGsoNbNS/C9/g8w352rrQBnhPDGz08zs\n1aBpTCn+y7BvC+uHR0Msx/fzarF8wd8a55wLrbuqlXK2dbv5+C+uWEPxvyCuC5Xnj/hfNevEK9Og\nNpSlb5B3eB9W4X+FbFJe51x5MBnu+3adcy4L/2t8H/wv3nXlHhdzHC/GBzXgA5rTgVVm9oKFmuSF\n/Bw4xcwKY+YPBe4O5bsZ/yvs4NgMQh4AzjffrPBS4CkX00cuaHrzKPCqc+5nLeTVktjz8jJraDZc\nim/WFD4v4x5f59wO/A3gNfj3/p9mdmAz2xwa7Fv4WB+Lv9GNW652GArMD+W7DF/jM8B887a7zDel\n24a/qSNm/+Jtt7nPQKwXgOPMDxgUAf4KHGO+SVwWPohuq9bO41h117Ns59zZreVJ02tI3HPfzIaE\nrnHb21H+WJucczXNbL+tafvhazrC71FL58n5wDLn3JP4z+75QXO5giCf99tY9g2h6Z0AzrnYeT0B\nzGycmT0fNDPciv881J1fg8LlDd7XTaF8mj13YwsUfPbPx9ee4Zx7BR/kfq2N+9SoLMQ/jrH7GHef\naf3aCW3/DGFm3c3sj0Ezw2345tDZ1rY+tx3xHREr3r1CR1zDBsUpZ/h7cKNzriJmndj34HPnXG3o\ndf2+tOEeo7nPWV98a4fmvt9b22+RNlHgJ3uTcFBSDNwZuqnKds51d87Ncc497JoOlOHi5NdoftCO\n/+/4pj4DnHPZwOP4YKC9mi0fvnniYDML5ztkF7bR3HabjDwZzK8E+obK09s1HvwhXpnqBqNo7viB\nbz5Ujf/yCa+7pr2Fd869h68t+F1QlmLghZjj2NM5d22Q/g3n3ER8ALsAf1Mfm+cm/C/8sSMUFuN/\nXQ/nnemce7mFIv4bHyBOBC7BB4L1gnNoAb7m4uoma7dd+LwcCvwJ+BaQG5yX79PG89I595Rz7sv4\nm4APg7ziKcb/ahw+Hj2cc3fFK1c7FQOnxeSd4Xz/nK/hj+dJ+ECsIFgnvH+7ul2cc8vxN0/fBl50\nzm3D32Reha+VisZbbVe314GaPfedc6tD17iWbo7L8bUndTpk9NYYG/HN0/JC8/JbSF/XxK7us/ll\nfFP4p4DpMT8+dZQ/AwuB/OAHpj/QcH6tI1T2IHjLDa3b0rkbaxK+tv/35vusrscHN5OD5TuC/829\nJ43KQsvHsTUtXjt3wffw/ZXHOed641uuQMNx3CPfEa3oiGvY2jjlDA/KtMvn527eY3yOb1La3Pd7\na/st0iYK/GRv9SfgmuCXXDOzHuY78PdqJv0GoMBaHomwG769/Eagxnzn8pNbSL+r5XsFf6N0nZml\nmdk5+H4WHWEmMNXMJpgflGCwmR3onFsH/Av4pZn1Dpbtb2YnhNbtHyrT+fi+b48HyzbQzGAewS+b\nfwXuNLNeQaDyXWBXH5/xAP7X9LOAx4ARZnZpUK40MzvCzEaZWTfztbtZzrlqfF+2eDfxAL/C94cY\nFZr3B+AH1jDQR1aw33Wa7HNwUzobX4uYja/ZI1g/Dfgb/hfeyc0EFLuiB/5mY2OwnakEAxm0xvwz\nqiaaWQ984L+d5o/RQ8CZZnZKUAuXYX6wgbxm0jcnLVi37i8Vf6zvtIbBc/qZ2cQgfa+gbJvwN8Q/\nbef22uIFfOD8QvB6UczrWBvxxymRzyBr9txvRx5LgK8F7+ep+KbmHSr4/P8DuDWoFToQP7hJcx4H\njjCzq4PPTDW+qfsIfKDaGXoBm51zFWZ2JI1r4P6GP++/aGbd8E33wjfiLZ27sSYD9+Gbnh4a/B0D\nFJrZIc65jfhg55LgPbmcxjfyfwWuD67b2fgmfLtqd8+f2OtfL/y1rdT84DY/biV9vU74jmhOR1zD\n5gA3B+9zX3xT4I4q5y7fYwTfJ/cBvzKzQcH+HR0Ekx117RZR4Cd7J+fcYnyn6d/ih81eju8n0Jx5\nwf9NZvZWM3mWAdfhv6C24G8OFnZ0+ZxzVcA5wevN+KZ4/9iV7cTZ7uv4zvz/h+8z9wINv15ehv/i\nWRqU6W80bgryGr7f2ufAncB5wS/yAHcD55kfce03cTb9bfyv2SvwtWJ/xn9J7co+VAXb+1HwnpyM\nHz1zLb6mpq5jPfjmlivNNz26Bt+UKV6e2/D9wHJC8+YHec0N1n8fCI8kdyvwgPmmM+HRFGfjfwX+\ni3OuMjT/i8AZQXnrRoPcbmbHtf8oNCr7UnxfnlfwN1eHAP9p4+op+Bustfhz7QT8wAnxtlOMr3m7\nCX9jUgz8D+3/Hngcf4NY93cr/v1cCPzLzMrwgyfUPeNwNr451Rr8uflqO7fXFi/gb1xfbOZ1I0FT\nszuB/wTv/1GdUKYWteHcb4vr8X2O6pr5ddZjE76Fr61dDzyIv3mujJfQOfcp/nN2GT7Yfwd/Xp8I\n/DwIUDvaN4DbgnPvFkItA5xzH+CvX3PxNW7b8f2q6srf0rlbz8wGAxOAXzvn1of+3gSepKHW70r8\n52oTfpCRcAuDP+F/oHsXeBv/WarBNy1tlw44f26l8fXv1/h+dJ/jj8GTMen32HdEczroGnYHsBj/\nHrwHvBXM64jy7e49xg1Bmd7AX89/DqR04LVbpH7UPRFJYuYfan6Fc+7YRJdFRPZtZvZz/MAck1tN\nvJcx/9zNUuCAIEhNZFlOww9aNLTVxCIiHUC/FoiIiEizzD8vbkzQrP1I/Eiq8xNdrrYyszODZqo9\n8P2v3qNhkKE9WY5M888mTQ1qEH/MPnQcRWTfp8BPREREWtIL31x9B/AXfNPkRxJaovaZiG8OuRbf\n3P3CThpkpjUG/ATfDPBt/AiitySgHCLSRampp4iIiIiISJJTjZ+IiIiIiEiSU+AnIiIiIiKS5BT4\niYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklO\ngZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS\n5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIi\nIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIi\nIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIi\nIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+An\nIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkF\nfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiS\nU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiI\nJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiI\niEiSU+AnIiIiIiKS5BT4iYiIiIiIJDkFfiIiIiIiIklOgZ+IiIiIiEiSU+AnIiJdhpktMrMtZpae\n6LKIiIjsSQr8RESkSzCzAuA4wAFn7cHtpu6pbYmIiDRHgZ+IiHQVlwGvArOAyXUzzSzfzP5hZhvN\nbJOZ/Ta07EozW2ZmZWa21MwOC+Y7MxseSjfLzO4IpsebWYmZ/a+ZrQfuN7M+ZvZYsI0twXReaP0c\nM7vfzNYGyxcE8983szND6dLM7HMzG9tpR0lERJKSAj8REekqLgMeDv5OMbMBZhYBHgNWAQXAYGAu\ngJmdD9warNcbX0u4qY3b2g/IAYYCV+G/b+8PXg8BdgK/DaV/EOgOHAT0B/4vmD8buCSU7nRgnXPu\n7TaWQ0REBABzziW6DCIiIp3KzI4FngcGOuc+N7MPgT/iawAXBvNrYtZ5CnjcOXd3nPwccIBzbnnw\nehZQ4py72czGA/8CejvnKpopz6HA8865PmY2EFgD5DrntsSkGwR8BAx2zm0zs78BrzvnfrHLB0NE\nRLok1fiJiEhXMBn4l3Pu8+D1n4N5+cCq2KAvkA/8dxe3tzEc9JlZdzP7o5mtMrNtwItAdlDjmA9s\njg36AJxza4H/AOeaWTZwGr7GUkREpF3U4VxERJKamWUCXwUiQZ87gHQgG9gADDGz1DjBXzGwfzPZ\nluObZtbZDygJvY5tTvM9YCQwzjm3PqjxexuwYDs5ZpbtnCuNs60HgCvw39mvOOfWNL+3IiIi8anG\nT0REkt3ZQC0wGjg0+BsFvBQsWwfcZWY9zCzDzI4J1rsXuMHMDjdvuJkNDZYtAb5mZhEzOxU4oZUy\n9ML36ys1sxzgx3ULnHPrgCeA3weDwKSZ2fGhdRcAhwHX4/v8iYiItJsCPxERSXaTgfudc6udc+vr\n/vCDq1wEnAkMB1bja+0uAHDOzQPuxDcLLcMHYDlBntcH65UCFwfLWvJrIBP4HN+v8MmY5ZcC1cCH\nwGfAtLoFzrmdwN+BYcA/2rnvIiIigAZ3ERER2euZ2S3ACOfcJa0mFhERiUN9/ERERPZiQdPQr+Nr\nBUVERHaJmnqKiIjspczsSvzgL084515MdHlERGTfpaaeIiIiIiIiSU41fiIiIiIiIkkuafr49e3b\n1xUUFCS6GCIiIiIiIgnx5ptvfu6c6xdvWdIEfgUFBSxevDjRxRAREREREUkIM1vV3DI19RQRERER\nEUlyCvxERERERESSnAI/ERERERGRJJc0ffziqa6upqSkhIqKikQXRfYiGRkZ5OXlkZaWluiiiIiI\niIjsEUkd+JWUlNCrVy8KCgows0QXR/YCzjk2bdpESUkJw4YNS3RxRERERET2iE5r6mlm95nZZ2b2\nfjPLzcx+Y2bLzexdMzsstGyymX0S/E3e1TJUVFSQm5uroE/qmRm5ubmqBRYRERGRLqUz+/jNAk5t\nYflpwAHB31XADAAzywF+DIwDjgR+bGZ9drUQCvokls4JEREREelqOq2pp3PuRTMraCHJRGC2c84B\nr5pZtpkNBMYDTzvnNgOY2dP4AHJOZ5VVRERERGR3OeeIutB/HM6BcxB1jqhzOMBF/bKoi59Hk3lx\ntxVnXryUbZvV5vzip4uXX9vWjWePlKWN242XMl669NQIQ3K7x8tgr5HIPn6DgeLQ65JgXnPzmzCz\nq/C1hQwZMqRzSrkbNm3axIQJEwBYv349kUiEfv36AfD666/TrVu3ZtddvHgxs2fP5je/+U27trlk\nyRLGjh3LE088wamntlThKiIiIm0RjTpqg5v2aNTfwNc6h4tCrXPURh3O1aUJ0kdd/Y1+1EFttC4d\nobzq0jUEBfVpgm0656iNNl5el5769UJBREzgEQ3uUKPOBcFHQzASjfpb6bplzjW8jgbBSv28OGnD\n222Y13Q74bL4Irr6QKg+rWucf7jc0XCQFMqnrpyEyxKlfhvhvIJkjcsSd7sAjdOEj3Xj7Tae19ag\nRpLTwYN789i3j0t0MVq0Tw/u4py7B7gHoKioaK/7uOXm5rJkyRIAbr31Vnr27MkNN9xQv7ympobU\n1PhvQVFREUVFRe3e5pw5czj22GOZM2dOpwZ+tbW1RCKRTstfRER2T01tlPLqWnZW1VJeVcuOyhqq\naqNEow2BSFuClYaAo+4mvPE6DcFITL7NBCv169eVoz648evElile/k3yrUsXs059kFW/vCFwi8Yp\nY9OAK36NTDJLMUgxw8x3jTAaXtfPB1JSGi8zM1IMjOB//XyfJiXIKzZtON+m240zL8VIrcuvUV7N\nlCWlYTtN09ZttyEtQfnDZaLRMQjm1aVp8RgQ2kbjfQ6XJV4XlHi9UuJ2VIm3btuSYXFStnW7bc2v\njbPiH4O2bnc39i2eXS1L74y9f7T4RAZ+a4D80Ou8YN4afHPP8PxFu7uxnzz6AUvXbtvdbBoZPag3\nPz7zoHatM2XKFDIyMnj77bc55phjuPDCC7n++uupqKggMzOT+++/n5EjR7Jo0SKmT5/OY489xq23\n3srq1atZsWIFq1evZtq0aVx33XVN8nbOMW/ePJ5++mmOO+44KioqyMjIAODnP/85Dz30ECkpKZx2\n2mncddddLF++nGuuuYaNGzcSiUSYN28excXF9dsF+Na3vkVRURFTpkyhoKCACy64gKeffprvf//7\nlJWVcc8991BVVcXw4cN58MEH6d69Oxs2bOCaa65hxYoVAMyYMYMnn3ySnJwcpk2bBsAPf/hD+vfv\nz/XXX787b4GIyD7NOUdFdZTyqhrKgwCtuemdVTXsqKoL5BpPN6SpZUfwuqommujdA/zNUcSMlBR/\noxsJbtpTUoxISsNNdor512YQSTEi1jAdXp5iBHlZkC+kpqYE6xqRuvxSGpY3Xj8oR136FIJtNc4/\nXM6URvvg16nLsy6vcJnq96G+TDH5psTZZwulDx2XSGibDXkFwURK40AjNhhpCFBaCbZoCFJEJHkl\nMvBbCHzLzObiB3LZ6pxbZ2ZPAT8NDehyMvCDRBWyM5SUlPDyyy8TiUTYtm0bL730EqmpqTzzzDPc\ndNNN/P3vf2+yzocffsjzzz9PWVkZI0eO5Nprr23yHLqXX36ZYcOGsf/++zN+/Hj++c9/cu655/LE\nE0/wyCOP8Nprr9G9e3c2b94MwMUXX8yNN97IpEmTqKioIBqNUlxc3GTbYbm5ubz11luAb8p65ZVX\nAnDzzTczc+ZMvv3tb3PddddxwgknMH/+fGpra9m+fTuDBg3inHPOYdq0aUSjUebOncvrr7/eEYdT\nRKTTVddGKa+spbw6CLIqg4CrumF6Z3UtOyp9gFZeVRsEZs0FdMGy6tp2NQ9LTTG6d4vQvVuq/58e\noXtaKn26dyOvT4TMtMbz66e7+WXpaSmhgKZxMJPSQpAVXqc9wUqKggkRkb1GpwV+ZjYHX3PX18xK\n8CN1pgE45/4APA6cDiwHyoGpwbLNZnY78EaQ1W11A73sjvbWzHWm888/v76Z5NatW5k8eTKffPIJ\nZkZ1dXXcdb7yla+Qnp5Oeno6/fv3Z8OGDeTl5TVKM2fOHC688EIALrzwQmbPns25557LM888w9Sp\nU+ne3Xc4zcnJoaysjDVr1jBp0iSA+prB1lxwwQX10++//z4333wzpaWlbN++nVNOOQWA5557jtmz\nZwMQiUTIysoiKyuL3Nxc3n77bTZs2MDYsWPJzc1t6yETEWlVNOp88FVVU9+8MV7tWX3Txzak21Hp\nA7rq2va192sUnNX/pZLbM+6ernsAACAASURBVJ0e3SJkBsvC003XSSUzmO4RTHdL7czBuEVEJJl1\n5qieF7Wy3AHfbGbZfcB9nVGuvUGPHj3qp3/0ox9x4oknMn/+fFauXMn48ePjrpOenl4/HYlEqKmp\nabS8traWv//97zzyyCPceeed9Q8qLysra1fZUlNTiUYbmgfFPu8uXPYpU6awYMECCgsLmTVrFosW\nLWox7yuuuIJZs2axfv16Lr/88naVS0SSg3OOypqoD7iqaymvbCbgipluNUCrqqGiun1NG7ulpvgA\nKy1C9/TUoFYsQv9eGT7gSovQIz21frouTThAywyCsvB0RlqKarlERGSvs08P7pIMtm7dyuDBftDS\nWbNm7XI+zz77LGPGjOGpp56qnzd58mTmz5/Pl7/8ZW677TYuvvji+qaeOTk55OXlsWDBAs4++2wq\nKyupra1l6NChLF26lMrKSnbu3Mmzzz7LscceG3ebZWVlDBw4kOrqah5++OH6/ZgwYQIzZsxg2rRp\n9U09s7KymDRpErfccgvV1dX8+c9/3uV9FZE9pzbqWLNlJ2WV1Y37mlXWBgOH+Omd1UEgVhkEZaGg\nzjeBrKkP9mrbMVpGitGoFiyzWyo9ukXolZHKgN7p9TVh8WrL6oOx9FQy04Kas1AglxpR7ZmIiHQd\nCvwS7Pvf/z6TJ0/mjjvu4Ctf+cou5zNnzpz6Zpt1zj33XGbMmMETTzzBkiVLKCoqolu3bpx++un8\n9Kc/5cEHH+Tqq6/mlltuIS0tjXnz5vGFL3yBr371qxx88MEMGzaMsWPHNrvN22+/nXHjxtGvXz/G\njRtXX7t49913c9VVVzFz5kwikQgzZszg6KOPplu3bpx44olkZ2drRFCRvZBzjjWlO3mneCvvlJTy\nTnEp763ZSnlVbavrZqSlxA3Qsrun1U+3GqDFTGd2i5CeqtozERGRjmDxHmi4LyoqKnKLFy9uNG/Z\nsmWMGjUqQSWSWNFolMMOO4x58+ZxwAEHJLQsOjdEYMuOqiDA28q7JaW8U1LK59urAOgWSWH0oN4c\nmp/N6IG96Z2ZRo/QICE90usCOV+bFklRcCYiIpJoZvamcy7uM+FU4yd7xNKlSznjjDOYNGlSwoM+\nka5oZ1UtH6zdyjslW3mn2Ad5qzaVA34Y9+H9ejJ+ZH8K87MpzMviwP16ayARERGRJKLAT/aI0aNH\n1z/XT0Q6V01tlE8+2867JaUsKfaB3kcbyur71g3KyqAwP5sLjxhCYX4WhwzOotc+8OBZERER2XUK\n/ERE9mHOOUq27Kzvk/dO8VbeW7OVndW+X17vjFQK87O59sD962vz+vdu2+NbREREJHko8BMR2Yds\nru+XF/yVbGXzjqBfXmoKBw3qzQVH5HNofjaF+dkU5HbX4CgiIiIdxTlwUYjWgqsN/kd9v4n0Xoku\nXYsU+ImI7KV2VtXy/lrfVHNJcSnvlmxl9eaGfnkH9O/JhAN9v7xD87MZMaCX+uWJiHQVjQKQaCgI\nqfXL6qdjgxQXkzacR5yAxtVCNNo0LxdtmN+kDNE4aWtDecWWt6W8Wijvbm23hX1rabs0MzDmwEK4\n+sU9egq0lwI/EZG9QE1tlI83bG+ozSvZysehfnmDszMpzM/i4nFDKMzP5uDBWfRM1yVcRATwN+/R\naqithmhNw19ttZ8frQ1N10BtTcx0TWj92nbkFS/f5vKqDaUL591a8NNMoOSiiT7qu8kgJQIWCf6n\nBNMpoelguaUE89uaNgKWFpO2bjolTto2bLdR2oj/BTactmf/RB/QVumuoROdeOKJ3HjjjZxyyin1\n837961/z0UcfMWPGjLjrjB8/nunTp1NUVMTpp5/On//8Z7KzsxulufXWW+nZsyc33HBDs9tesGAB\nI0aMYPTo0QDccsstHH/88Zx00kkdsGcwbdo05s2bR3FxMSkpqmEQaQ/nHMWbd7KkpJR3gxE231uz\nlYpq/yWelZlGYX42Xx7VnzF52YzJz6J/L/XLE5HdUFcDFC8oiQ1EWp2ubj7AaRJUtTPfVgO0ZgKs\n5mphOoulQEoaRILgIiUNUlKD16nNT6dmNJ6fkhon+EmJE7AEgUazgVKkmYCmDXm1KfiJEzS1GkjF\nBkexAZi6IexpCvw60UUXXcTcuXMbBX5z587lF7/4RZvWf/zxx3d52wsWLOCMM86oD/xuu+22Xc4r\nVjQaZf78+eTn5/PCCy9w4okndljeYTU1NaSm6hSVfd+m7ZX1z8urq9HbUl4NQHpqCgcPzuJrRw6l\nMD+LwrxshqpfnojU2bkFNn8KW1YGf5/CllVQXR4neAoHTnGCqj3NIkGQEwRH9dOpEKkLetJiptOg\nW/ddCKrC22gm30Z5pbaQbyt5paT6AElkH9N17qqfuBHWv9exee53CJx2V7OLzzvvPG6++Waqqqro\n1q0bK1euZO3atRx33HFce+21vPHGG+zcuZPzzjuPn/zkJ03WLygoYPHixfTt25c777yTBx54gP79\n+5Ofn8/hhx8OwJ/+9CfuueceqqqqGD58OA8++CBLlixh4cKFvPDCC9xxxx38/e9/5/bbb+eMM87g\nvPPO49lnn+WGG26gpqaGI444ghkzZpCenk5BQQGTJ0/m0Ucfpbq6mnnz5nHggQc2KdeiRYs46KCD\nuOCCC5gzZ0594Ldhwwauueaa+sc2zJgxgy9+8YvMnj2b6dOnY2aMGTOGBx98kClTptSXB6Bnz55s\n376dRYsW8aMf/Yg+ffrw4Ycf8vHHH3P22WdTXFxMRUUF119/PVdddRUATz75JDfddBO1tbX07duX\np59+mpEjR/Lyyy/Tr18/otEoI0aM4JVXXqFfv367916LtNGOyhreX7OVd0u2siQI8kq27AQgxWDE\ngF6cPHo/xgRB3sj9epEW0Q2ESJdVWwPbShoCu9ggr2Jr4/Q9+kH2UD+IRItBVbwAKxT8xNY6tRj8\ntCOv8LR+wBLZq3SdwC8BcnJyOPLII3niiSeYOHEic+fO5atf/Spmxp133klOTg61tbVMmDCBd999\nlzFjxsTN580332Tu3LksWbKEmpoaDjvssPrA75xzzuHKK68E4Oabb2bmzJl8+9vf5qyzzmoUWNWp\nqKhgypQpPPvss4wYMYLLLruMGTNmMG3aNAD69u3LW2+9xe9//3umT5/Ovffe26Q8c+bM4aKLLmLi\nxIncdNNNVFdXk5aWxnXXXccJJ5zA/Pnzqa2tZfv27XzwwQfccccdvPzyy/Tt25fNmze3etzeeust\n3n//fYYNGwbAfffdR05ODjt37uSII47g3HPPJRqNcuWVV/Liiy8ybNgwNm/eTEpKCpdccgkPP/ww\n06ZN45lnnqGwsFBBn3Sa6tooH28o8zV5QZPNjzeUEXTLI69PJoV52Vx29FAK83y/vB7qlyfS9VRs\ni6mxW9kQ5G0t9jVydVLSIHsI5AyDvCLoUwB9hgX/CyC9ZwJ2QESSQde5A2mhZq4z1TX3rAv8Zs6c\nCcBf//pX7rnnHmpqali3bh1Lly5tNvB76aWXmDRpEt27dwfgrLPOql/2/vvvc/PNN1NaWsr27dsb\nNSuN56OPPmLYsGGMGDECgMmTJ/O73/2uPvA755xzADj88MP5xz/+0WT9qqoqHn/8cX71q1/Rq1cv\nxo0bx1NPPcUZZ5zBc889x+zZswGIRCJkZWUxe/Zszj//fPr27Qv4YLg1Rx55ZH3QB/Cb3/yG+fPn\nA1BcXMwnn3zCxo0bOf744+vT1eV7+eWXM3HiRKZNm8Z9993H1KlTW92eSFs451i9uZwlxQ1NNt9f\ns5XKGt8vL7t7GoV52Zx80H4cmp/FmLxs+vZMT3CpRWSPiEahbG38GrstK6F8U+P0mX18MDdoLBw0\nyQd5dQFe70G+Jk1EpIN1ncAvQSZOnMh3vvMd3nrrLcrLyzn88MP59NNPmT59Om+88QZ9+vRhypQp\nVFRU7FL+U6ZMYcGCBRQWFjJr1iwWLVq0W+VNT/c3qpFIhJqamibLn3rqKUpLSznkkEMAKC8vJzMz\nkzPOOKNd20lNTSUa9TfM0WiUqqqq+mU9evSon160aBHPPPMMr7zyCt27d2f8+PEtHqv8/HwGDBjA\nc889x+uvv87DDz/crnKJ1NlYVsm7QVPNJSVbebeklNKgX15GWgoHD8rikqOG+kcp5GWTn5Opfnki\nyaxqh+9bF1tjt2UllK6C2obvMSwC2fk+mBt1ZkONXc4w30wzMzvuJkREOpMCv07Ws2dPTjzxRC6/\n/HIuuugiALZt20aPHj3Iyspiw4YNPPHEE4wfP77ZPI4//nimTJnCD37wA2pqanj00Ue5+uqrASgr\nK2PgwIFUV1fz8MMPM3jwYAB69epFWVlZk7xGjhzJypUrWb58eX2fwBNOOKHN+zNnzhzuvffe+n3Z\nsWMHw4YNo7y8nAkTJtQ3G61r6vmlL32JSZMm8d3vfpfc3Fw2b95MTk4OBQUFvPnmm3z1q19l4cKF\nVFfH73S+detW+vTpQ/fu3fnwww959dVXATjqqKP4xje+waefflrf1LOu1u+KK67gkksu4dJLLyUS\n0a+m0rodlTW8t6ahueY7xVtZU9q4X96pB+1HYX42Y/KyGDFA/fJEko5zsH1D/Bq7zZ/Cjs8ap0/v\n7YO5/qPgwNMbN8nMyvN93URE9iIK/PaAiy66iEmTJjF37lwACgsLGTt2LAceeCD5+fkcc8wxLa5/\n2GGHccEFF1BYWEj//v054ogj6pfdfvvtjBs3jn79+jFu3Lj6YO/CCy/kyiuv5De/+Q1/+9vf6tNn\nZGRw//33c/7559cP7nLNNde0aT/Ky8t58skn+cMf/lA/r0ePHhx77LE8+uij3H333Vx11VXMnDmT\nSCTCjBkzOProo/nhD3/ICSecQCQSYezYscyaNYsrr7ySiRMnUlhYyKmnntqoli/s1FNP5Q9/+AOj\nRo1i5MiRHHXUUQD069ePe+65h3POOYdoNEr//v15+umnAd8UdurUqWrmKXFV10b5aH1Z8EB0H+R9\n8llDv7z8nEzGDslm6jEFjMnL5uDBveneTZdKkaRQXeFr55oMpBKMlFmzM5TYfADXpwBGnNJQY1cX\n4GX20eAlIrJPMef28HNPOklRUZFbvHhxo3nLli1j1KhRCSqRJMrixYv5zne+w0svvdRsGp0bXYNz\njpWbykM1eaV8sHZbfb+8nB7dKMzz/fEODWrzctUvT2Tf5Rzs+Dx+jd2Wlb4fXlhaj5iArqCh1i47\nH1J1PRCRfYuZvemcK4q3TD9jS1K56667mDFjhvr2dVGflVXwbjDwiq/R28rWnb4ZcWZahEMGZ3Fp\nXb+8/Gzy+qhfnsg+p6bKj4S55dOYZpnBX9X2xul7DfTB3BfGNw3wevRVrZ2IdBkK/CSp3Hjjjdx4\n442JLobsAdsra3ivpOGB6O8Ul7J2qx/4J5JijBjQi9MP2Y/CvGwK87M5oH9PUtUvT2Tv55x/aHm8\nQVS2rPLPvHPRhvSpGQ3BXMFxDdM5w/xjEdIyE7ATIiJ7n6QP/Jxz+kVfGkmW5s1dSVVN0C8vFOQt\n37idurdySE53Di/I4fK8LA7Nz+agQVlkdtPAPiJ7rbqHljfqY7cyCPJWQmXsQ8v7+2Bu6NFNm2T2\nHAAp+lFHRKQ1SR34ZWRksGnTJnJzcxX8CeCDvk2bNpGRkZHookgzolHHyk076kfXXFJcytJ126gK\n+uXl9uhGYX42Z4wZRGHwvLycHt0SXGoRaaJia5wau5U+yCstBlfbkDYlDfoM9cFc3pGN+91lD9VD\ny0VEOkBSB355eXmUlJSwcePGRBdF9iIZGRnk5eUluhgS+GxbhX8oeonvk/dOcSnbKvwzJDPTIhyS\nl8WULxZQmOcHX1G/PJG9RLQWtq2NU2MXTO/c3Dh9Zo4P5gYfDgef2/jZdr0G6qHlIiKdLKkDv7S0\nNIYNG5boYohIoKyimvdKtrKkpLR+EJZ1oX55B+7XizMKB1GYl0VhfjbD+6lfnkhCVW73jz+I92y7\n0tWNH1qekgpZwUPLR09s/OiDPkMhIyshuyAiIl5SB34ikjhVNVGWrdvGuyWlLAmCvP+G+uUV5Hbn\niIKcYITNLEYPVL88kT0uGvUPLY87kMqnsCOmxUx6FuQUwICD4MAzGjfJ7J0HEd1WiIjsrXSFFpEO\n9/6arUyd9QYbyyoB6NuzG4V52ZxVOIjC/GzGDM6ij/rliXS+aBTKP4dta3yzzNLixkHelpVQU9GQ\n3lJ8ANdnKIw8rfEgKn0KoHtOIvZCREQ6gAI/EelQr67YxBUPLCYrM43ffm0sY4f0YVBWhvrliXS0\naC1s/8wHdHWBXf3/tX7UzG3rIFrdeL1uPX0Qlzschp/UuElmVj6k6kcZEZFkpMBPRDrMM0s38M0/\nv0Ven0weumIcA7P0/CyRXVJbA9vXxwnmgumta6BsXeORMQEi6dB7EPQeDPlHNUz3HgRZg31tnh5a\nLiLSJSnwE5EOMf/tEm6Y9y4HDerNrKlH6hELIs2pqfJBW3NB3bY1vt9d+CHlAKmZQfA2CIYdFwR1\ndYFd8Nc9R0GdiIjE1amBn5mdCtwNRIB7nXN3xSwfCtwH9AM2A5c450qCZbXAe0HS1c65szqzrCKy\n6+7/z6f85NGlfHH/XO65rIie6fpNSbqo6gooWxsnmFsLW0v8/x2fNV2vW8+Gmrn9JzQEdVl5DdMZ\n2QrqRERkl3Xa3ZmZRYDfAV8GSoA3zGyhc25pKNl0YLZz7gEz+xLwM+DSYNlO59yhnVU+Edl9zjl+\n/cwn3P3sJ5xy0ADuvnAsGWkamVOSVFV5K/3p1kL5pqbrZWQ1BHUDxzRM19fUDYKM3nt+f0REpEvp\nzJ/ljwSWO+dWAJjZXGAiEA78RgPfDaafBxZ0YnlEpANFo46fPPoBD7yyivMPz+Nn5xyiZ+7Jvquy\nLH7Ty62hIK+itOl6mTkNwdvgopj+dIP9g8nTe+75/REREYnRmYHfYKA49LoEGBeT5h3gHHxz0ElA\nLzPLdc5tAjLMbDFQA9zlnGsSFJrZVcBVAEOGDOn4PRCRuKpro/zPvHdYsGQtVx43jJtOH6VRO2Xv\n5BxUbI3T9LIkNG8tVG5rum6Pfj6I6zMUhh7dtJau9yBI0wBGIiKyb0h0R5wbgN+a2RTgRWANUDdE\n2VDn3Boz+wLwnJm955z7b3hl59w9wD0ARUVFbs8VW6Trqqiu5RsPv8VzH37G/5wykm+M319BnySG\nc7BzS+Oml1vjNMOs3hGzokHPAT5wyx0Ow05oCOrqBk/pNRBS0xOyWyIiIp2hMwO/NUB+6HVeMK+e\nc24tvsYPM+sJnOucKw2WrQn+rzCzRcBYoFHgJyJ71raKaq6YtZg3Vm3mjrMP5pKjhia6SJKsolHf\nX65Rf7o4I2CGHz4O/gHkvQb64G3AaDjgy01r6nrtB5G0xOyXiIhIgnRm4PcGcICZDcMHfBcCXwsn\nMLO+wGbnXBT4AX6ET8ysD1DunKsM0hwD/KITyyoirdhYVsnk+17n4w1l/ObCsZxZOCjRRZJ9VbQW\ndmxs/Ey62KCubB3UVjVeLyUVegVNLAceCiNPD9XSBUFdj/4QSXRjFhERkb1Pp307OudqzOxbwFP4\nxznc55z7wMxuAxY75xYC44GfmZnDN/X8ZrD6KOCPZhYFUvB9/JY22YiI7BElW8q5dObrrNu6k3sn\nFzF+ZP9EF0n2VrU1/hl0TfrRhQK7snUQrWm8XqRb6MHjR8bpTzfY97lL0QBCIiIiu8KcS46ucUVF\nRW7x4sWJLoZI0vlkQxmXznyd8qoa7ptyBEUFOYkukiRKTRVsXx+/hq5uevv6+A8eb/Sw8dhn1A2G\n7rl6Rp2IiMhuMrM3nXNF8ZapPYyINOud4lKm3P86kZQU/nL10YwaqGeNdRnOwbp3YNlCWLHIP3x8\n+2dAzI+FaT0aBkTZ/8RQgBd68HhmHwV1IiIiCabAT0Tienn551w5ezE5Pbvx0NfHMTS3R6KLJJ0t\nGoU1i2HpIz7gK10NFoH8cXDAyU2fUdd7EKT3VlAnIiKyD1DgJyJNPPXBer7957cp6NudB78+jgG9\nMxJdJOks0VpY/QosXQjLHoWytZCSBl8YD8f/D4z8CvTITXQpRUREZDcp8BORRv66uJgb//4uhfnZ\n3D/lCLK7d0t0kaSj1VbDypd8zd6H//QjbEbSYfhJMPrHMOJUyMxOdClFRESkAynwE5F69760gjv+\nuYzjDujLHy89nO7ddIlIGjWV8N/nfRPOD/8JFaW+f94BX4bRE31TzvSeiS6liIiIdBLd1YkIzjl+\n+a+P+e3zy/nKIQP51QWFpKdGEl0s2V1V5bD8GR/sffwUVG7zffJGngajzoLhEyAtM9GlFBERkT1A\ngZ9IF1cbddzyyPs8/NpqLjoynzvOPoRIigbr2GdVlvkgb+kjPuirLofMHBh9FoyaCF84AVLTE11K\nERER2cMU+Il0YVU1Ub771yU89u46rh2/P98/ZSSmERr3PTu3wEdP+AFa/vsc1FZCj/5QeJEP+IYe\nCxFd7kVERLoy3QmIdFHlVTVc+9BbvPDxRn5w2oFcfcL+iS6StMeOz+HDx3yw9+kLEK3xj1goutwH\ne/njIEXNdUVERMRT4CfSBW0tr+byB97g7dVbuOucQ7jwyCGJLpK0xbZ1QbD3CKz6D7go9CmAo74B\no8+GwYfpmXoiIiISlwI/kS7ms20VXHbf66zYuIPffe0wTjtkYKKLJC0pXR08Y28hFL/m5/UdAcd9\nzw/Qst8hCvZERESkVQr8RLqQ1ZvKuWTma3y+vZL7phzBsQf0TXSRJJ5N//W1eksfgXVL/LwBh8CJ\nP/TBXv8DE1s+ERER2eco8BPpIj5aX8alM1+jsibKw1eMY+yQPokuktRxDjZ+GAR7C+GzD/z8QYfB\nST+BUWdCrvpgioiIyK5T4CfSBby1egtT73+DjLQU5l1zNCMG9Ep0kcQ5WPeOb8K5dCFs+gQwGHIU\nnPIzH+xl5ye6lCIiIpIkFPiJJLmXPtnIVbPfpH/vdB76+jjyc7onukhdVzQKa96EZUHNXukqsBQo\nOBbGXe2DvV77JbqUIiIikoQU+IkkscffW8f1c99m/349mf31I+nfKyPRRep6orWw+lXfjHPZo1C2\nFlLS/IPUj78BRn4FeuQmupQiIiKS5BT4iSSpOa+v5ofz3+OwIX2YOeUIsjLTEl2krqO2Gla+5Gv1\nPnwMdmyESDoMPwlG/xhGnAqZ2YkupYiIiHQhCvxEktCMRf/l509+yPiR/Zhx8eFkdtODvDtdTSWs\nWOSDvY/+CTu3QFp3OOBk/0D1A06GdPWtFBERkcRQ4CeSRJxz3PXkh/zxhRWcVTiI6ecX0i01JdHF\nSl5V5bD8GT9Ay8dPQeU2SO/ta/RGT4ThEyAtM9GlFBEREVHgJ5IsaqOOH85/j7lvFHPpUUP5yVkH\nkZKiB3t3uMoyH+QtWwifPA3V5ZDZx9fqjZro++6lpie6lCIiIiKNKPATSQKVNbV85y9LePy99Xz7\nS8P57pdHYKagr8Ps3AIfPemDveXPQm0l9OgPhRf6B6oXHAsR9aEUERGRvZcCP5F93I7KGq556E1e\n+uRzfnTGaL5+7LBEFyk57PjcD8yydCF8+gJEa6D3YCi63Nfu5Y+DFPWdFBERkX2DAj+RfdiWHVVM\nnfUG763ZyvTzCznv8LxEF2nftm1dEOw9Aqv+Ay4KfQrgqG/4PnuDDoMU9ZkUERGRfY8CP5F91Pqt\nFVw68zVWbS5nxsWHcfJBevD3Lild7Z+vt3QhFL8GOOg7Ao79rq/Z228MqNmsiIiI7OMU+Insg1Z+\nvoNLZr7Glh1VzJp6BF/cv2+ii7Rv2fTf4IHqC2Ht237egEPgxJt8n73+Bya2fCIiIiIdTIGfyD5m\n6dptXHbf69RGo8y56ijG5OlB4K1yDjZ+6Gv1li2EDe/7+YMOg5Nu9cFe7v6JLKGIiIhIp1LgJ7IP\nWbxyM1NnvUHP9FTmXnU0w/vrgeDNcg7Wv+uDvaWPwKZPAPODspzyUxh1JmQPSXQpRURERPYIBX4i\n+4jnP/qMax96k0FZmTx4xTgGZ+vB4E1Eo7DmTVj2iA/4SleBpcDQY2Dc1T7Y66W+kCIiItL1dGrg\nZ2anAncDEeBe59xdMcuHAvcB/YDNwCXOuZJg2WTg5iDpHc65BzqzrCJ7s0eWrOF7f32Hkfv14oHL\nj6RvTz0gvF60Fla/6ptwLnsUtq2BlDT/IPXjvgcHfgV6qA+kiIiIdG2tBn5mNgKYAQxwzh1sZmOA\ns5xzd7SyXgT4HfBloAR4w8wWOueWhpJNB2Y75x4wsy8BPwMuNbMc4MdAEeCAN4N1t+zCPors0x58\ndRW3PPI+RxTkcO/kInpn6EHh1FbDyn8Hwd5jsOMziKTD8AnwpR/ByFMhs0+iSykiIiKy12hLjd+f\ngP8B/gjgnHvXzP4MtBj4AUcCy51zKwDMbC4wEQgHfqOB7wbTzwMLgulTgKedc5uDdZ8GTgXmtKG8\nIknBOcfvnl/O9H99zEmj+vPbrx1GRloXfmB4TSWsWOSbcH70T9i5BdK6wwEn+8cuHHAypKvPo4iI\niEg8bQn8ujvnXrfGz7GqacN6g4Hi0OsSYFxMmneAc/DNQScBvcwst5l1B8duwMyuAq4CGDJEgzRI\n8ohGHXc+voyZ//6Uc8YO5ufnjSEt0gUfHF69E5Y/44O9j5+Eym2Q3htGnOqDvf0nQLfuiS6liIiI\nyF6vLYHf52a2P77JJWZ2HrCug7Z/A/BbM5sCvAisAWrburJz7h7gHoCioiLXQWUSSaia2ig3/uM9\n/vZmCVO+WMAtZ4wmJaULPUC8sgw++ZcP9j75F1SX+2abo86C0RN9371U9XEUERERaY+2BH7fxAdX\nB5rZGuBT4JI2rLcGyA+9zgvm1XPOrcXX+GFmPYFznXOlwXbGx6y7qA3bFNmnVVTXct2ct/nX0g18\n56QRXDdhODG17clpScPH9QAAIABJREFU5xb46EnfZ2/5s1BbCT36Q+GFPuArOBYi6tsoIiIisqta\nDfyCPnonmVkPIMU5V9bGvN8ADjCzYfiA70Lga+EEZtYX2OyciwI/wI/wCfAU8FMzqxud4eRguUjS\n2l5Zw5UPLOaVFZv4yVkHMfmLBYkuUufa8Tl8+E8f7K1YBNEa6D0Yiqb6YG/IUZDShfs0ioiIiHSg\ntozqeUvMawCcc7e1tJ5zrsbMvoUP4iLAfc65D8zsNmCxc24hvlbvZ2bm8E09vxmsu9nMbscHjwC3\n1Q30IpKMNm2vZOqsN/hg7TZ+fcGhnD22SZfW5FC23j9yYekjsOo/4KKQPRSOuhZGnw2DDoOULtiX\nUURERKSTmXMtd40zs++FXmYAZwDLnHOXd2bB2quoqMgtXrw40cUQabe1pTu5dOZrlGzZye8vPowJ\nowYkukgdq7TY1+otXQjFrwEOcg/w/fVGnwX7jYGu0JxVREREpJOZ2ZvOuaJ4y9rS1POXMZlNx9fi\nichu+u/G7Vx672uUVdQw+/IjGfeF3EQXqWM4B4vvg7cfgrVv+XkDDobxP/DBXr8DFeyJiIiI7EFt\nGdwlVnf8YCsishveX7OVyfe9DsCcq47i4MFZCS5RB3rld/CvH/ravAk/9rV7ufsnulQiIiIiXVZb\n+vi9R/AoB3xfvX5Ai/37RKRlr67YxBUPLCYrM40Hv34kX+jXM9FF6jjLHoN/3ewHaDn/AfXZExH5\n/+zdd5iU5fm38fNiQcBewAYoqNgLyAqKMfZesKCCqGCXqKgplkSNNdHEX2KNBEU0FhDEggYr1sTG\nUgTBhoiyVkClKH3v948ZfTdIWWB3n93Z83Mcc+w8beY7zIHuxX0/9yVJNUBFRvwOK/d8AfBVSqki\nDdwlLcbz47/inAdH0nydxtx/egc2Wqtx1pEqz+ej4JEzoNnOcNQ/LfokSZJqiCUWfhGxbv7pou0b\n1owIXGVTWn6Pjirlt4PGsN3Ga3LPKe1Zd7VVso5UeaaXwoNdYNX1oEt/WGXVrBNJkiQpb2kjfiPI\nTfFc3AoMCdisShJJBarffz/mqifG03Hz9ehzcjGrN1yRW2xrqLkz4cHjYf4PcNIzsEaBrUwqSZJU\nyy3xN8+UUqvqDCIVqpQSNz3/ITcP+5ADt9uAm7u0pVGDAmpMvnABDDoFvn4Xug2CDbbNOpEkSZIW\nUaEhh4hYB2hNro8fACmlV6oqlFQoysoSVz85nntem8Sx7Zrz56N3oH5RAd33lhI8fQlMeA4O+zts\nsW/WiSRJkrQYFVnV83TgfHItHEYDuwKvA/tUbTSpdpu/sIyLHh7Do6M+44w9WvH7Q7YhCq133Zu9\nYfidsNu5UHxq1mkkSZK0BBUZejgf2AX4JKW0N9AW+K5KU0m13Jz5Czn7vhE8OuozfnfgVoVZ9L3/\nFDx9KWx9GOxvhxdJkqSarCJTPeeklOZEBBHRMKX0XkRsVeXJpFpqxpz5nH5vCcMnfcO1R27Pibtu\nmnWkyvfF2/DwabDRTnB0H6hXQPcsSpIkFaCKFH6lEbE28BjwXER8C3xStbGk2mnqrLl0v/st3v9y\nJrd0acvhO22cdaTKN/2z3AqejdeBEx6CVVbLOpEkSZKWYWl9/H4H9E8pHZXfdWVEvAisBTxdHeGk\n2qT02x84ue9bfD59Nnd1L2avrdbPOlLlmzsL+h+f+3nq07DGhlknkiRJUgUsbcRvY+D1iJgE9AcG\npZRerpZUUi0z4euZnNT3Lb6fu4D7T+tAcct1s45U+coWwuDT4KtxcMJA2HD7rBNJkiSpgpa4uEtK\n6UJgE+AyYAdgTEQ8HRHdI2KN6goo1XRvT/6OY3u/zvyFiYfO2q0wiz6AZ34PHzwNB/8FWu+fdRpJ\nkiQth6Wu6plyXk4p9STXzuHvwAXAV9URTqrpXpswlRPufIPVG9VncM/d2GajNbOOVDXe7JNr3bDr\nr6D9GVmnkSRJ0nKqaAP3HYAuwPHAVODSqgwl1QbPjPuS8x4cRcsmq3LfaR3YYM1GWUeqGh88A09f\nDFsdAgdcm3UaSZIkrYClLe7Smlyx1wVYCAwADkgpTaymbFKNNbBkMpcMHsNOLdamX49dWHvVVbKO\nVDW+HAsPnwobbA9H32nbBkmSpFpqaSN+T5Nb1OX4lNI71ZRHqvHuenUi1/77XfZo3YTeJ7ZjtYYV\nGjivfWZ8kWvb0HDNXNuGhqtnnUiSJEkraIm/saaUNq/OIFJNl1Li/579gNtenMChO2zE347fiYb1\nC3QEbN73ubYNs7/LtW1YswD7EUqSJNUhBTpUIVWuhWWJKx5/hwfe/JSu7Vtw7ZE7UFQvso5VNcoW\nwuDTc9M8uw6AjXbMOpEkSZJWkoWftAzzFpTx64GjeXLMF/Tca3MuOnArIgq06AN49nJ4f2iubcOW\nB2adRpIkSZVgqe0cACLi8IhY5nlSIZo9byFn/KuEJ8d8waUHb83FB21d2EXf8Lvgjduh/VnQ4ays\n00iSJKmSVKSgOx74MCL+EhFbV3UgqaaY/sN8Tuz7Jq9+OIXrj96Bs/Ys8NteP3wehl4ErQ+Eg/6c\ndRpJkiRVomVO9UwpnRgRawJdgXsiIgH9gP4ppZlVHVDKwtcz53By37eYOOV7bj9hZw7eYaOsI1Wt\nr8bBoB6w/rbQua9tGyRJkgpMhaZwppRmAA+T6+W3EXAUMDIizqvCbFImJn/zA8f2fp1Pv/mBu3vs\nUvhF38wv4YHjcu0aTngIGq6RdSJJkiRVsmWO+EXEEcApwBbAv4D2KaWvI2JVYDxwa9VGlKrP+1/O\n5KS+bzJ3QRkPnN6Btpusk3WkqjXve+jfBWZ/A6c8BWs1yzqRJEmSqkBFVvU8Bvh7SumV8jtTSj9E\nxGlVE0uqfiM//ZZT+g2nUYN6DDp7N7bcoMBHvsrK4JEz4fPR0OVB2LhN1okkSZJURSpS+F0JfPHj\nRkQ0BjZIKU1KKQ2rqmBSdXr1wymc+a8RrL9mQ+4/rQMt1l0160hV7/kr4L0n4cA/w9aHZJ1GkiRJ\nVagi9/gNAsrKbS/M71umiDgoIt6PiAkRcclijm8SES9GxKiIGBMRh+T3t4yI2RExOv/oXZH3k1bE\n0LFfcOo9w9l0vVUZdPZudaPoK+kHr90Ku5wOu/bMOo0kSZKqWEVG/OqnlOb9uJFSmhcRqyzroogo\nAm4H9gdKgeERMSSlNL7caZcBA1NKd0TEtsBQoGX+2EcpJeeeqUr1f+tT/vDoWHbeZB369tiFtRo3\nyDpS1fvoBfj3b2CL/eGgG6CQ+xJKkiQJqNiI35T8Ai8AREQnYGoFrmsPTEgpTcwXjgOATouck4A1\n88/XAj6vwOtKleKOlz7i0kfG8sstm3LfaR3qRtH39bswsDs03Ro63w1FFfm3H0mSJNV2Ffmt72zg\ngYi4DQhgMnByBa5rlj/3R6VAh0XOuRJ4Nt8WYjVgv3LHWkXEKGAGcFlK6dVF3yAizgTOBNhkk00q\nEEmClBLXP/0e/3x5IkfstDE3HrsTq9SvUGeT2m3W17m2DQ0a59o2NFpz2ddIkiSpIFSkgftHwK4R\nsXp+e1Ylvn9X4J6U0v9FxG7AfRGxPbnFZDZJKU2LiHbAYxGxXb6fYPlsfYA+AMXFxakSc6lALSxL\n/OHRsQwYPpmTdt2Uq47Yjnr16sBUx/mzoX9X+H4KnDIU1m6RdSJJkiRVowrN84qIQ4HtgEaRvx8o\npXT1Mi77DCj/22Xz/L7yTgMOyr/e6xHRCGiSUvoamJvfPyIiPgK2BEoqkldanLkLFnLhQ6MZOvZL\nzttnC369/5ZEXbi/rawMHj0LPhsBx98PzXbOOpEkSZKq2TLnt+VX1DweOI/cVM9jgU0r8NrDgdYR\n0Sq/GEwXYMgi53wK7Jt/n22ARuTuKWyaXxyGiNgMaA1MrNAnkhbj+7kLOP3eEoaO/ZLLD9uW3xyw\nVd0o+gBeuBrGPw4HXAPbHJZ1GkmSJGWgIiN+HVNKO0bEmJTSVRHxf8BTy7oopbQgIs4FngGKgLtT\nSuMi4mqgJKU0BPgNcGdEXEhuoZceKaUUEb8Ero6I+eRaSZydUvpmBT+j6rjvfphHj37DGfvZdG48\ndic6t2uedaTqM/I++M/fod0psNu5WaeRJElSRipS+M3J//whIjYGpgEbVeTFU0pDybVoKL/vinLP\nxwO7L+a6wcDgiryHtDRfzZjDSX3fZNK0H7ij284csN2GWUeqPhNfgicvgM33gUP+atsGSZKkOqwi\nhd8TEbE28FdgJLmRuTurNJVUCSZN/Z4T+77Jt9/P455TdqHj5k2yjlR9prwPD50M67WGY++BojrQ\nqkKSJElLtNTCLyLqAcNSSt8BgyPiSaBRSml6taSTVtC7X8zgpL5vsbCsjP5n7sqOzdfOOlL1mTUF\nHjgW6jeEbgOh0VpZJ5IkSVLGlrq4S0qpDLi93PZciz7VdCWTvuG4f75Og6Jg0Nm71a2ib/4cGHBC\nrmdf1wGwtv0tJUmSVIFVPYFhEXFM1JklEFWbvfT+15zY902art6Qh3t2ZIv118g6UvUpK4PHekLp\nW3D0P6F5u6wTSZIkqYaoSOF3FjAImBsRMyJiZkTMWNZFUnUb8vbnnH5vCZs3XZ2BZ+9Gs7UbZx2p\ner14HYx7BPa7ErbtlHUaSZIk1SDLXNwlpVSHhkxUW933xidc8fg77NJyXe7qXsyajerYYiajHoBX\nb4S2J8HuF2SdRpIkSTXMMgu/fE+9n0kpvVL5caTlk1Li9hcncOOzH7DfNutz2wk706hBUdaxqtfH\nr8IT50OrPeGwv9u2QZIkST9TkXYOvyv3vBHQHhgB7FMliaQKKitLXDf0Xfr+52OObtuMGzrvSIOi\nisxeLiBTP4SHToR1N4Pj/mXbBkmSJC1WRaZ6Hl5+OyJaADdVWSKpAhYsLOOSR8by8IhSenRsyRWH\nbUu9enVspOv7abm2DfXq59o2NK5Dq5dKkiRpuVRkxG9RpcA2lR1Eqqg58xfSq/8onh3/FRfutyW9\n9t2COrfo7I9tG2Z8Dj2ehHVaZp1IkiRJNVhF7vG7FUj5zXpAG2BkVYaSlmTW3AWccW8Jr0+cxlVH\nbEf3ji2zjlT9UoIh58LkN6BzP2jRPutEkiRJquEqMuJXUu75AqB/Sum/VZRHWqJvvp9Hj35vMe7z\nGdx0fBuObNss60jZeOnPMHYQ7HM5bH901mkkSZJUC1Sk8HsYmJNSWggQEUURsWpK6YeqjSb9f59/\nN5uT+r5J6bez6XNSO/bdZoOsI2Xj7QHw8g3Qphvs8Zus00iSJKmWqMgSiMOA8p2wGwPPV00c6ecm\nTpnFsb1f5+sZc/nXqe3rbtE36b/w+LnQcg847CbbNkiSJKnCKjLi1yilNOvHjZTSrIhYtQozST95\n57PpdL/7LQD6n7kr2zdbK+NEGZn2ETzULbeIy/H3Qf1Vsk4kSZKkWqQiI37fR8TOP25ERDtgdtVF\nknLenDiNrn3eoFGDIgadvVvdLfp++AYe6AxRL9+2YZ2sE0mSJKmWqciI3wXAoIj4HAhgQ+D4Kk2l\nOm/Yu1/xqwdG0nydxtx/egc2Wqvxsi8qRAvmwoBuML0Uuj+Ra9QuSZIkLaeKNHAfHhFbA1vld72f\nUppftbFUlz026jN+M+htttt4Te45pT3rrlZHpzWmBEPOg09fg2P6wia7Zp1IkiRJtdQyp3pGxDnA\naimld1JK7wCrR8Svqj6a6qJ7/vsxFzw0mg6t1uXBM3atu0UfwMt/gTEPwd5/gB06Z51GkiRJtVhF\n7vE7I6X03Y8bKaVvgTOqLpLqsumzF3DAthtwd49dWL1hRWYiF6gxg+ClP8FOXeGXv8s6jSRJkmq5\nivxmXRQRkVJKkOvjB9ThYRhVpV77bkFZgqJ6dbhVwSevw+O/gk13h8Nvtm2DJEmSVlpFCr+ngYci\n4p/57bPy+6RKFxEU1eU6Z9pHMOAEWKsFHH8/1G+YdSJJkiQVgIoUfhcDZwI989vPAXdWWSKprvrh\nG3jwOCBBt0Gw6rpZJ5IkSVKBWOY9fimlspRS75RS55RSZ2A8cGvVR5PqkAXzYODJ8N2n0OVBWG/z\nrBNJkiSpgFRo9YyIaAt0BY4DPgYeqcpQUp2SEjxxPkx6FY7qA5t2zDqRJEmSCswSC7+I2JJcsdcV\nmAo8BERKae9qyibVDa/+H7z9IOx5Cex0fNZpJEmSVICWNuL3HvAqcFhKaQJARFxYLamkuuKdwfDC\nNbDDcbDXJVmnkSRJUoFa2j1+RwNfAC9GxJ0RsS9Ql9dblCrX5Lfg0Z6wyW7Q6TbbNkiSJKnKLLHw\nSyk9llLqAmwNvAhcAKwfEXdExAEVefGIOCgi3o+ICRHxs+GMiNgkIl6MiFERMSYiDil37NL8de9H\nxIHL/9GkGuybj6F/V1hzYzj+Ads2SJIkqUpVZFXP71NKD6aUDgeaA6PItXhYqnyj99uBg4Ftga4R\nse0ip10GDEwptQW6AP/IX7ttfns74CDgH/nXk2q/2d/l2jaULYBuD8Nq62WdSJIkSQVumYVfeSml\nb1NKfVJK+1bg9PbAhJTSxJTSPGAA0GnRlwTWzD9fC/g8/7wTMCClNDel9DEwIf96Uu22cH6ubcM3\nH0OXB6DJFlknkiRJUh2wXIXfcmoGTC63XZrfV96VwIkRUQoMBc5bjmuJiDMjoiQiSqZMmVJZuaWq\nkRI8eSF8/DIccSu0/EXWiSRJklRHVGXhVxFdgXtSSs2BQ4D7IqLCmfKjj8UppeKmTZtWWUipUvz3\nJhh1H/zyd9Cma9ZpJEmSVIdUqIH7CvoMaFFuu3l+X3mnkbuHj5TS6xHRCGhSwWul2mPcY/D8lbD9\nMbD3H7JOI0mSpDqmKkf8hgOtI6JVRKxCbrGWIYuc8ymwL0BEbAM0Aqbkz+sSEQ0johXQGnirCrNK\nVae0BB49C1p0gE7/sG2DJEmSql2VjfillBZExLnAM0ARcHdKaVxEXA2UpJSGAL8B7sw3hk9Aj5RS\nAsZFxEBgPLAAOCeltLCqskpV5ttPoH8XWGND6PIgNGiUdSJJkiTVQZGrs2q/4uLiVFJSknUM6f+b\nMx36HgAzv4DTnoemW2adSJIkSQUsIkaklIoXd6wq7/GT6q6F82Fgd5g2AU58xKJPkiRJmbLwkypb\nSjD0tzDxReh0O2y2Z9aJJEmSVMdl3c5BKjyv3Qoj7oFf/Branph1GkmSJMnCT6pU7z4Bz10B2x4J\n+1yedRpJkiQJsPCTKs9nI2DwGdC8GI7qDfX86yVJkqSawd9Mpcrw3WTo3xVWbwpd+kODxlknkiRJ\nkn7i4i7SypozAx48DubPgZOH5Io/SZIkqQax8JNWxsIF8PApMPUD6PYwrL911okkSZKkn7Hwk1ZU\nSvDURTDheTj8Zth876wTSZIkSYvlPX7SinrjH1DSFzr2gnY9sk4jSZIkLZGFn7Qi3vs3PPMH2OZw\n2O+qrNNIkiRJS2XhJy2vz0fB4NNh47ZwVB/bNkiSJKnG8zdWaXlML4UHu8Cq60HXAbDKqlknkiRJ\nkpbJxV2kipo7Ex48HuZ9D6c9C2tskHUiSZIkqUIs/KSKWLgAHj4Vvn4Xug2EDbbNOpEkSZJUYRZ+\nUkU8cyl8+Cwc+jfYYr+s00iSJEnLxXv8pGV5oze81Qd2Oxd2OS3rNJIkSdJys/CTlub9p3OjfVsd\nCvtfnXUaSZIkaYVY+ElL8sXbufv6NtwRjrkT6hVlnUiSJElaIRZ+0uLM+DzXtqHx2vm2DatlnUiS\nJElaYS7uIi1q7qxc24a5M+DUZ2DNjbJOJEmSJK0UCz+pvLKFMPh0+Ood6PoQbLh91okkSZKklWbh\nJ5X37GXwwVNwyI2w5QFZp5EkSZIqhff4ST9660544x/QoSe0PyPrNJIkSVKlsfCTAD58Dp66CLY8\nGA68Lus0kiRJUqWy8JO+fAcG9YANtodj7rJtgyRJkgqOhZ/qtplf5lbwbLgmnPAQNFw960SSJElS\npXNxF9Vd877PFX2zv4VTn4Y1N846kSRJklQlqnTELyIOioj3I2JCRFyymON/j4jR+ccHEfFduWML\nyx0bUpU5VQeVLYRHzoQvx0Dnu2GjHbNOJEmSJFWZKhvxi4gi4HZgf6AUGB4RQ1JK4388J6V0Ybnz\nzwPalnuJ2SmlNlWVT3Xcc1fAe0/CQTfAVgdlnUaSJEmqUlU54tcemJBSmphSmgcMADot5fyuQP8q\nzCPllNwNr98G7c+EXc/OOo0kSZJU5aqy8GsGTC63XZrf9zMRsSnQCnih3O5GEVESEW9ExJFLuO7M\n/DklU6ZMqazcKmQTnod//xZaHwAH/jnrNJIkSVK1qCmrenYBHk4pLSy3b9OUUjFwAnBTRGy+6EUp\npT4ppeKUUnHTpk2rK6tqq6/Gw8AesP62ufv6ilzbSJIkSXVDVRZ+nwEtym03z+9bnC4sMs0zpfRZ\n/udE4CX+9/4/afnM/AoePA5WWS3ftmGNrBNJkiRJ1aYqC7/hQOuIaBURq5Ar7n62OmdEbA2sA7xe\nbt86EdEw/7wJsDswftFrpQqZ9wP07wI/TIMTBsBai51xLEmSJBWsKpvrllJaEBHnAs8ARcDdKaVx\nEXE1UJJS+rEI7AIMSCmlcpdvA/wzIsrIFafXl18NVKqwsjJ49Cz4fBR0eQA2duBYkiRJdU+V3uSU\nUhoKDF1k3xWLbF+5mOteA3aoymyqI4ZdCe8OgQP/BFsfmnUaSZIkKRM1ZXEXqfKNuAf+ezMUnwa7\n/irrNJIkSVJmLPxUmD56EZ78NWyxHxz8F4jIOpEkSZKUGQs/FZ6v34OB3aHp1tC5n20bJEmSVOdZ\n+KmwzPoaHjwWGjTKtW1otGbWiSRJkqTMORSiwjF/NvTvCrOmwClDYe0Wy75GkiRJqgMs/FQYysrg\n0bPhsxFw/H3QbOesE0mSJEk1hoWfCsML18D4x2D/a2Cbw7NOI0mSJNUo3uOn2m/U/fCfv0G7HtDx\nvKzTSJIkSTWOhZ9qt4kvwxPnw2Z7wyE32rZBkiRJWgwLP9VeUz6AgSfBeq3huHuhqEHWiSRJkqQa\nycJPtdP3U+GBzlC0Sr5tw1pZJ5IkSZJqLBd3Ue0zfw4MOAFmfQU9/g3rbJp1IkmSJKlGs/BT7VJW\nBo//Cia/CcfeC82Ls04kSZIk1XhO9VTt8tKf4J3BsO8fYbsjs04jSZIk1QoWfqo9RveHV/4KbU+C\nX1yYdRpJkiSp1rDwU+0w6T8w5Dxo9Us47O+2bZAkSZKWg4Wfar6pE2BAN1i3FRz3L9s2SJIkScvJ\nwk812/fT4MFjoV59OGEgNF4n60SSJElSreOqnqq5FsyFh7rB9M+gx5O5ET9JkiRJy83CTzVTSrl7\n+j59HTrfDS3aZ51IkiRJqrWc6qma6eUbYMxDsM9lsP0xWaeRJEmSajULP9U8YwbCS3+GnU6APX6b\ndRpJkiSp1rPwU83yyWvw+DnQcg84/GbbNkiSJEmVwMJPNctbfWDtTXJtG+qvknUaSZIkqSC4uItq\nlqPvhO+nwqrrZp1EkiRJKhiO+KlmKWoAa26UdQpJkiSpoFj4SZIkSVKBs/CTJEmSpAJn4SdJkiRJ\nBa5KC7+IOCgi3o+ICRFxyWKO/z0iRucfH0TEd+WOdY+ID/OP7lWZU5IkSZIKWZWt6hkRRcDtwP5A\nKTA8IoaklMb/eE5K6cJy558HtM0/Xxf4I1AMJGBE/tpvqyqvJEmSJBWqqhzxaw9MSClNTCnNAwYA\nnZZyflegf/75gcBzKaVv8sXec8BBVZhVkiRJkgpWVRZ+zYDJ5bZL8/t+JiI2BVoBLyzPtRFxZkSU\nRETJlClTKiW0JEmSJBWamrK4Sxfg4ZTSwuW5KKXUJ6VUnFIqbtq0aRVFkyRJkqTarcru8QM+A1qU\n226e37c4XYBzFrl2r0WufWlpbzZixIhZEfH+cqdUTdQEmJp1CFUKv8vC4PdYOPwuC4ffZWHweywc\nNeW73HRJByKlVCXvGBH1gQ+AfckVcsOBE1JK4xY5b2vgaaBVyofJL+4yAtg5f9pIoF1K6ZulvF9J\nSqm40j+Iqp3fZeHwuywMfo+Fw++ycPhdFga/x8JRG77LKhvxSyktiIhzgWeAIuDulNK4iLgaKEkp\nDcmf2gUYkMpVoCmlbyLiGnLFIsDVSyv6JEmSJElLVpVTPUkpDQWGLrLvikW2r1zCtXcDd1dZOEmS\nJEmqI2rK4i6VoU/WAVRp/C4Lh99lYfB7LBx+l4XD77Iw+D0Wjhr/XVbZPX6SJEmSpJqhkEb8JEmS\nJEmLYeEnSZIkSQWuIAq/iDgoIt6PiAkRcUnWebRiIuLuiPg6It7JOotWXES0iIgXI2J8RIyLiPOz\nzqQVExGNIuKtiHg7/11elXUmrbiIKIqIURHxZNZZtOIiYlJEjI2I0RFRknUerbiIWDsiHo6I9yLi\n3YjYLetMWn4RsVX+7+OPjxkRcUHWuRan1t/jFxFF5PoF7g+UkmsB0TWlND7TYFpuEfFLYBbwr5TS\n9lnn0YqJiI2AjVJKIyNiDXI9OY/072TtExEBrJZSmhURDYD/AOenlN7IOJpWQET8GigG1kwpHZZ1\nHq2YiJgEFKeUakKjaK2EiLgXeDWldFdErAKsmlL6LutcWnH5uuQzoENK6ZOs8yyqEEb82gMTUkoT\nU0rzgAFAp4wzaQWklF4B7NdYy6WUvkgpjcw/nwm8CzTLNpVWRMqZld9skH/U7n8trKMiojlwKHBX\n1lkkQUSsBfwS6AuQUppn0VcQ9gU+qolFHxRG4dcMmFxuuxR/yZRqhIhoCbQF3sw2iVZUfnrgaOBr\n4LmUkt9l7XQTcBFQlnUQrbQEPBsRIyLizKzDaIW1AqYA/fJTsO+KiNWyDqWV1gXon3WIJSmEwk9S\nDRQRqwODgQtSSjOyzqMVk1JamFJqAzQH2keE07BrmYg4DPg6pTQi6yyqFL9IKe0MHAyck79NQrVP\nfWBn4I6UUlvRAUEfAAAgAElEQVTge8B1Kmqx/HTdI4BBWWdZkkIo/D4DWpTbbp7fJykj+fvBBgMP\npJQeyTqPVl5+CtKLwEFZZ9Fy2x04In9v2ABgn4i4P9tIWlEppc/yP78GHiV3y4tqn1KgtNwsiofJ\nFYKqvQ4GRqaUvso6yJIUQuE3HGgdEa3ylXYXYEjGmaQ6K78gSF/g3ZTS37LOoxUXEU0jYu3888bk\nFtF6L9tUWl4ppUtTSs1TSi3J/T/yhZTSiRnH0gqIiNXyi2aRnxZ4AOBK2LVQSulLYHJEbJXftS/g\nImi1W1dq8DRPyA0z12oppQURcS7wDFAE3J1SGpdxLK2AiOgP7AU0iYhS4I8ppb7ZptIK2B04CRib\nvzcM4PcppaEZZtKK2Qi4N79KWT1gYErJVgBSdjYAHs39+xr1gQdTSk9nG0kr4TzggfzAxUTglIzz\naAXl/yFmf+CsrLMsTa1v5yBJkiRJWrpCmOopSZIkSVoKCz9JkiRJKnAWfpIkSZJU4Cz8JEmSJKnA\nWfhJkiRJUoGz8JMk1VkRsTAiRpd7XFKJr90yIircYy3fo+35/PP/REStb7kkSao5/J+KJKkum51S\napN1iLzdgNcjYh3g+5TSgqwDSZIKhyN+kiQtIiImRcRfImJsRLwVEVvk97eMiBciYkxEDIuITfL7\nN4iIRyPi7fyjY/6liiLizogYFxHPRkTjxbzX5hExGrgfOAEYAeyUH4Fcv5o+siSpwFn4SZLqssaL\nTPU8vtyx6SmlHYDbgJvy+24F7k0p7Qg8ANyS338L8HJKaSdgZ2Bcfn9r4PaU0nbAd8AxiwZIKX2U\nH3UcAbQH7gVOSym1SSl9XamfVpJUZ0VKKesMkiRlIiJmpZRWX8z+ScA+KaWJEdEA+DKltF5ETAU2\nSinNz+//IqXUJCKmAM1TSnPLvUZL4LmUUuv89sVAg5TStUvIMjyltEtEDAbOTymVVvLHlSTVYY74\nSZK0eGkJz5fH3HLPF7KYe+sjond+EZjW+SmfBwFPRsSFK/iekiT9jIWfJEmLd3y5n6/nn78GdMk/\n7wa8mn8+DOgJEBFFEbFWRd8kpXQ2cBVwDXAk8O/8NM+/r1x8SZL+P1f1lCTVZY3zo2w/ejql9GNL\nh3UiYgy5Ubuu+X3nAf0i4nfAFOCU/P7zgT4RcRq5kb2ewBfLkWNP4F/AHsDLK/RJJElaCu/xkyRp\nEfl7/IpTSlOzziJJUmVwqqckSZIkFThH/CRJkiSpwDniJ0mSJEkFzsJPkqQliIhJEbFf1jkkSVpZ\nFn6SJEmSVOAs/CRJWg4R0TAiboqIz/OPmyKiYf5Yk4h4MiK+i4hvIuLViKiXP3ZxRHwWETMj4v2I\n2DfbTyJJqkvs4ydJ0vL5A7Ar0AZIwOPAZcDlwG+AUqBp/txdgRQRWwHnAruklD6PiJZAUfXGliTV\nZY74SZK0fLoBV6eUvk4pTQGuAk7KH5sPbARsmlKan1J6NeWWz14INAS2jYgGKaVJKaWPMkkvSaqT\nLPwkSVo+GwOflNv+JL8P4K/ABODZiJgYEZcApJQmABcAVwJfR8SAiNgYSZKqiYWfJEnL53Ng03Lb\nm+T3kVKamVL6TUppM+AI4Nc/3suXUnowpfSL/LUJuKF6Y0uS6jILP0mSlq5BRDT68QH0By6LiKYR\n0QS4ArgfICIOi4gtIiKA6eSmeJZFxFYRsU9+EZg5wGygLJuPI0mqiyz8JElauqHkCrUfH42AEmAM\nMBYYCVybP7c18DwwC3gd+EdK6UVy9/ddD0wFvgTWBy6tvo8gSarrInfPuSRJkiSpUDniJ0mSJEkF\nzsJPkiRJkgqchZ8kSZIkFTgLP0mSJEkqcPWzDlBZmjRpklq2bJl1DEmSJEnKxIgRI6amlJou7ljB\nFH4tW7akpKQk6xiSJEmSlImI+GRJx5zqKUmSJEkFzsJPkiRJkgqchZ8kSZIkFbiCucdPkiRJ0vKb\nP38+paWlzJkzJ+soqqBGjRrRvHlzGjRoUOFrMin8IuIg4GagCLgrpXT9Ys45DrgSSMDbKaUTqjWk\nJEmSVAeUlpayxhpr0LJlSyIi6zhahpQS06ZNo7S0lFatWlX4umov/CKiCLgd2B8oBYZHxJCU0vhy\n57QGLgV2Tyl9GxHrV3dOSZIkqS6YM2eORV8tEhGst956TJkyZbmuy+Iev/bAhJTSxJTSPGAA0GmR\nc84Abk8pfQuQUvq6mjNKkiRJdYZFX+2yIt9XFoVfM2Byue3S/L7ytgS2jIj/RsQb+amhPxMRZ0ZE\nSUSULG/Fqxrqoxdh3KOQUtZJJEmSpIJRU1f1rA+0BvYCugJ3RsTai56UUuqTUipOKRU3bbrYBvWq\nbUruhkE94M59YOLLWaeRJElSFZs2bRpt2rShTZs2bLjhhjRr1uyn7Xnz5i312pKSEnr16rVc79ey\nZUumTp26MpFrpSwWd/kMaFFuu3l+X3mlwJsppfnAxxHxAblCcHj1RFRmjr0H3h4AL/4J/nUEbL4P\n7HclbLRTxsEkSZJUFdZbbz1Gjx4NwJVXXsnqq6/Ob3/725+OL1iwgPr1F1+2FBcXU1xcXC05a7ss\nCr/hQOuIaEWu4OsCLLpi52PkRvr6RUQTclM/J1ZrSmWjXhG07QbbHwPD74RX/w/++cvc9j6Xwbqb\nZZ1QkiSpYF31xDjGfz6jUl9z243X5I+Hb7dc1/To0YNGjRoxatQodt99d7p06cL555/PnDlzaNy4\nMf369WOrrbbipZde4sYbb+TJJ5/kyiuv5NNPP2XixIl8+umnXHDBBRUeDZw0aRKnnnoqU6dOpWnT\npvTr149NNtmEQYMGcdVVV1FUVMRaa63FK6+8wrhx4zjllFOYN28eZWVlDB48mNatW6/IH021qvbC\nL6W0ICLOBZ4h187h7pTSuIi4GihJKQ3JHzsgIsYDC4HfpZSmVXdWZahBI+h4Hux8Mvz3Znj9HzD+\ncWh3Cux5EazuQq+SJEmFrLS0lNdee42ioiJmzJjBq6++Sv369Xn++ef5/e9/z+DBg392zXvvvceL\nL77IzJkz2WqrrejZs2eFet2dd955dO/ene7du3P33XfTq1cvHnvsMa6++mqeeeYZmjVrxnfffQdA\n7969Of/88+nWrRvz5s1j4cKFlf7Zq0ImffxSSkOBoYvsu6Lc8wT8Ov9QXdZoLdj3Cmh/Jrx8Q+4e\nwNEPwm7n5ArDRmtmnVCSJKlgLO/IXFU69thjKSoqAmD69Ol0796dDz/8kIhg/vz5i73m0EMPpWHD\nhjRs2JD111+fr776iubNmy/zvV5//XUeeeQRAE466SQuuugiAHbffXd69OjBcccdx9FHHw3Abrvt\nxnXXXUdpaSlHH310rRjtg5q7uIv0v9bYEA77O5zzFrTeH175C9zSBt64AxbMzTqdJEmSKtlqq632\n0/PLL7+cvffem3feeYcnnniCOXPmLPaahg0b/vS8qKiIBQsWrFSG3r17c+211zJ58mTatWvHtGnT\nOOGEExgyZAiNGzfmkEMO4YUXXlip96guFn6qXZpsAcfdC2e8CBtsD09fArcV5xaEKasdw+ySJEla\nPtOnT6dZs1wHuHvuuafSX79jx44MGDAAgAceeIA99tgDgI8++ogOHTpw9dVX07RpUyZPnszEiRPZ\nbLPN6NWrF506dWLMmDGVnqcqWPipdmq2M3QfAic9Co3XgUfPgt57wAfP2ANQkiSpwFx00UVceuml\ntG3bdqVH8QB23HFHmjdvTvPmzfn1r3/NrbfeSr9+/dhxxx257777uPnmmwH43e9+xw477MD2229P\nx44d2WmnnRg4cCDbb789bdq04Z133uHkk09e6TzVIVKB/JJcXFycSkpKso6hLJSVwbhH4IVr4duP\nYdPdYb+roMUuWSeTJEmq8d5991222WabrGNoOS3ue4uIESmlxfa3cMRPtV+9erBD59z9f4fcCFM/\nhL77wYBuMOX9rNNJkiRJmbPwU+Govwq0PwN6jYK9L4OJL8M/doXHz4HppVmnkyRJkjJj4afC03B1\n2PN3cP5o6HA2jBkIt+wMz14OP3yTdTpJkiSp2ln4qXCt1gQO+jOcWwLbHw2v3ZprAfHq32DeD1mn\nkyRJkqqNhZ8K3zqbwlG9oed/ocWuMOwquHVnKOkHC1d+VShJkiSpprPwU92xwXbQbSCc8hSs1QKe\nvCB3D+D4x20BIUmSpIJm4ae6Z9OOcNqz0OVBqFcEA0+Gu/aFj1/JOpkkSVKds/fee/PMM8/8z76b\nbrqJnj17LvGavfbaix9buR1yyCF89913Pzvnyiuv5MYbb1zqez/22GOMHz/+p+0rrriC559/fnni\nL9ZLL73EYYcdttKvU5ks/FQ3RcDWh0LP16DT7TDzS7j3cLjvaPhiTNbpJEmS6oyuXbsyYMCA/9k3\nYMAAunbtWqHrhw4dytprr71C771o4Xf11Vez3377rdBr1XT1sw4gZapeEbQ9EbY/Bt66E179P/jn\nHrDDsbD3H2DdVlknlCRJqj5PXQJfjq3c19xwBzj4+iUe7ty5M5dddhnz5s1jlVVWYdKkSXz++efs\nscce9OzZk+HDhzN79mw6d+7MVVdd9bPrW7ZsSUlJCU2aNOG6667j3nvvZf3116dFixa0a9cOgDvv\nvJM+ffowb948tthiC+677z5Gjx7NkCFDePnll7n22msZPHgw11xzDYcddhidO3dm2LBh/Pa3v2XB\n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\nRERERCTN/T+D0JHtP3FmLQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1080x720 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"McTDFmzVZvYp","colab_type":"code","colab":{}},"source":["model.save('deepfake-detection2.h5')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jw6sms-o7rC7","colab_type":"code","outputId":"732a5bff-6152-444a-a5d8-36391de6ffb5","executionInfo":{"status":"ok","timestamp":1584611794820,"user_tz":-540,"elapsed":118344,"user":{"displayName":"Jimin Hwang","photoUrl":"","userId":"11954576279429508826"}},"colab":{"base_uri":"https://localhost:8080/","height":457}},"source":["from google.colab import files\n","files.download('deepfake-detection2.h5')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["----------------------------------------\n","Exception happened during processing of request from ('::ffff:127.0.0.1', 35850, 0, 0)\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.6/socketserver.py\", line 320, in _handle_request_noblock\n","    self.process_request(request, client_address)\n","  File \"/usr/lib/python3.6/socketserver.py\", line 351, in process_request\n","    self.finish_request(request, client_address)\n","  File \"/usr/lib/python3.6/socketserver.py\", line 364, in finish_request\n","    self.RequestHandlerClass(request, client_address, self)\n","  File \"/usr/lib/python3.6/socketserver.py\", line 724, in __init__\n","    self.handle()\n","  File \"/usr/lib/python3.6/http/server.py\", line 418, in handle\n","    self.handle_one_request()\n","  File \"/usr/lib/python3.6/http/server.py\", line 406, in handle_one_request\n","    method()\n","  File \"/usr/lib/python3.6/http/server.py\", line 639, in do_GET\n","    self.copyfile(f, self.wfile)\n","  File \"/usr/lib/python3.6/http/server.py\", line 800, in copyfile\n","    shutil.copyfileobj(source, outputfile)\n","  File \"/usr/lib/python3.6/shutil.py\", line 82, in copyfileobj\n","    fdst.write(buf)\n","  File \"/usr/lib/python3.6/socketserver.py\", line 803, in write\n","    self._sock.sendall(b)\n","ConnectionResetError: [Errno 104] Connection reset by peer\n","----------------------------------------\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"2dzEKxQuOYU1","colab_type":"code","colab":{}},"source":["!cp /content/kaggle/working/deepfake-detection-model-xception.h5 /content/drive/'My Drive'/kaggle/"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6vLXYF0AZvYy","colab_type":"code","outputId":"aa164305-888b-4e73-d988-bdc9ff21d966","colab":{}},"source":["from tensorflow.keras.models import load_model\n","model = load_model('deepfake-detection-model-xception.h5')\n","model.evaluate(Y_train, Y_val)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'Y_train' is not defined","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mNameError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-2-d0279c6b5f2d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'deepfake-detection-model-xception.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'Y_train' is not defined"]}]},{"cell_type":"code","metadata":{"id":"YyWMhNWeZvY4","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}